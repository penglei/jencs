/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var clearsilver = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"cs":3,"inner_statement_list":4,"EOF":5,"statement":6,"block":7,"single_stmt":8,"if":9,"alt":10,"each":11,"loop":12,"with":13,"escape":14,"macro_def":15,"inner_statement_list_repetition0":16,"T_IF":17,"expr":18,"TAG_END":19,"elif_list":20,"else_single":21,"T_END_IF":22,"T_ELIF_TOKENS":23,"T_ELIF":24,"T_ELSEIF":25,"T_ELSE":26,"T_ALT":27,"T_END_ALT":28,"T_EACH":29,"t_variable_one":30,"=":31,"T_END_EACH":32,"T_WITH":33,"base_variable":34,"T_END_WITH":35,"T_ESCAPE":36,"STRING":37,"escape_end":38,"T_END_ESCAPE":39,"T_LOOP":40,"loop_init_expr":41,",":42,"loop_step":43,"T_END_LOOP":44,"T_DEF":45,"T_MACRO_NAME":46,"(":47,"def_formal_parameters":48,")":49,"T_END_MACRO_DEF":50,"def_formal_parameters_repetition_plus0":51,"more_parameter":52,"single_stmt_syntax":53,"CONTENT":54,"set_stmt":55,"var_stmt":56,"name_stmt":57,"macro_call":58,"include_stmt":59,"cs_debugger":60,"T_SET":61,"T_VAR":62,"T_NAME":63,"T_CALL":64,"parameter_list":65,"T_INCLUDE":66,"T_DEBUGGER":67,"variable":68,"expr_basic":69,"#":70,"const_variable":71,"function_call":72,"!":73,"?":74,"$":75,"T_BOOLEAN_OR":76,"T_BOOLEAN_AND":77,"T_IS_EQUAL":78,"T_IS_NOT_EQUAL":79,"<":80,">":81,"T_IS_SMALLER_OR_EQUAL":82,"T_IS_GREATER_OR_EQUAL":83,"+":84,"-":85,"*":86,"/":87,"%":88,"comma_expr":89,"comma_expr_repetition_plus0":90,"comma_expr_more":91,"t_properties":92,"t_property":93,".":94,"t_label":95,"[":96,"]":97,"PROP_NUMBER":98,"T_VARIABLE":99,"t_math_number":100,"NUMBER":101,"NUMBER_HEX":102,"T_FUN_NAME":103,"parameter_list_repetition_plus0":104,"more_parameter_list":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"T_IF",19:"TAG_END",22:"T_END_IF",24:"T_ELIF",25:"T_ELSEIF",26:"T_ELSE",27:"T_ALT",28:"T_END_ALT",29:"T_EACH",31:"=",32:"T_END_EACH",33:"T_WITH",35:"T_END_WITH",36:"T_ESCAPE",37:"STRING",39:"T_END_ESCAPE",40:"T_LOOP",42:",",44:"T_END_LOOP",45:"T_DEF",46:"T_MACRO_NAME",47:"(",49:")",50:"T_END_MACRO_DEF",54:"CONTENT",61:"T_SET",62:"T_VAR",63:"T_NAME",64:"T_CALL",66:"T_INCLUDE",67:"T_DEBUGGER",70:"#",73:"!",74:"?",75:"$",76:"T_BOOLEAN_OR",77:"T_BOOLEAN_AND",78:"T_IS_EQUAL",79:"T_IS_NOT_EQUAL",80:"<",81:">",82:"T_IS_SMALLER_OR_EQUAL",83:"T_IS_GREATER_OR_EQUAL",84:"+",85:"-",86:"*",87:"/",88:"%",94:".",96:"[",97:"]",98:"PROP_NUMBER",99:"T_VARIABLE",101:"NUMBER",102:"NUMBER_HEX",103:"T_FUN_NAME"},
productions_: [0,[3,2],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[4,1],[9,8],[20,5],[20,0],[23,1],[23,1],[21,0],[21,3],[10,6],[11,8],[13,8],[14,6],[38,1],[38,2],[12,9],[41,3],[43,2],[43,0],[15,9],[48,1],[48,2],[48,0],[52,2],[8,2],[8,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[55,4],[56,2],[57,2],[58,5],[59,1],[60,1],[18,1],[18,1],[68,1],[68,2],[68,1],[68,1],[69,2],[69,2],[69,2],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[89,2],[91,2],[34,1],[34,2],[92,1],[92,2],[93,2],[93,3],[95,1],[95,1],[30,1],[71,1],[71,2],[71,3],[71,2],[71,3],[71,2],[71,1],[100,1],[100,1],[72,4],[72,4],[65,1],[65,2],[65,0],[105,2],[16,0],[16,2],[51,1],[51,2],[90,1],[90,2],[104,1],[104,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
        var program = new ast.AST_Program($$[$0-1]);
        return program;
      
break;
case 12:
        //console.log('if:' + $$[$0-6].left.target.name);
        var ifRootAlternate;
        if ($$[$0-3]){
            //else是最后被归约出来的，要放到最末尾的AST_If中
            var elifstmt = $$[$0-3];
            while (elifstmt.alternate){
                elifstmt = elifstmt.alternate;
            };
            elifstmt.alternate = $$[$0-2];

            ifRootAlternate = $$[$0-3]
        } else {
            ifRootAlternate = $$[$0-2]
        }
        this.$ = new ast.AST_If($$[$0-4], $$[$0-6], ifRootAlternate);
        this.$.pos = pos(yy, _$[$0-7], _$[$0-5]);
        this.$.endPos = pos(yy, _$[$0-1], _$[$0]);
      
break;
case 13:
        //console.log('elif:' + $$[$0-2].left.target.name);
        //console.log($$[$0-4]);
        var alternate = new ast.AST_If($$[$0], $$[$0-2]);
        alternate.pos = pos(yy, _$[$0-3], _$[$0-1]);
        if ($$[$0]){
            var lastStmt = $$[$0][$$[$0].length - 1];
            alternate.endPos = pos(yy, lastStmt.endPos || lastStmt.pos);
        }
        if ($$[$0-4]){
            //遍历AST_If找到最下面的alternate，把当前归约出的elif放到末尾
            //归约的顺序跟代码书写顺序是一样的
            var curBranch = $$[$0-4];
            while(curBranch.alternate) curBranch = curBranch.alternate
            curBranch.alternate = alternate;
            this.$ = $$[$0-4];
        } else {
            this.$ = alternate;
        }
      
break;
case 18:
        this.$ = new ast.AST_Block($$[$0]);
        if ($$[$0]){
            var firstStmt = $$[$0][0];
            var lastStmt = $$[$0][$$[$0].length - 1];
            this.$.pos = pos(yy, firstStmt.pos);
        } else {
            this.$.pos = pos(yy, _$[$0-2], _$[$0-1]);
        }
    
break;
case 19:
        this.$ = new ast.AST_Alt($$[$0-2], $$[$0-4]);
        this.$.pos = pos(yy, _$[$0-5]);
    
break;
case 20:
        this.$ = new ast.AST_Each($$[$0-2], $$[$0-6], $$[$0-4]);
        this.$.pos = pos(yy, _$[$0-7]);
    
break;
case 21:
        this.$ = new ast.AST_With($$[$0-2], $$[$0-6], $$[$0-4]);
        this.$.pos = pos(yy, _$[$0-7]);
    
break;
case 22:
        //check surpport 'html' and 'js' , 'url'
        this.$ = new ast.AST_Escape($$[$0-2], $$[$0-4]);
        this.$.pos = pos(yy, _$[$0-5]);
      
break;
case 25:
        this.$ = new ast.AST_Loop($$[$0-2], $$[$0-7], $$[$0-5], $$[$0-4]);
        this.$.pos = pos(yy, _$[$0-8]);
    
break;
case 26:
        $$[$0-2].initValue = $$[$0];
        this.$ = $$[$0-2];
      
break;
case 27:this.$ =$$[$0];
break;
case 28:this.$ =new ast.AST_Number(1) //默认步进为1;
break;
case 29:
        this.$ = new ast.AST_MacroDef($$[$0-2], $$[$0-7], $$[$0-5]);
        this.$.pos = pos(yy, _$[$0-8]);
        this.$.pos.last_line = _$[$0-2].last_line;
        this.$.pos.last_column = _$[$0-2].last_column;
      
break;
case 30:this.$ =[$$[$0]];
break;
case 31:this.$ =[$$[$0-1]].concat($$[$0]);
break;
case 32:this.$ =[];
break;
case 33:this.$ =$$[$0];
break;
case 34:
        this.$ = $$[$0-1];
        this.$.pos = pos(yy, _$[$0-1], _$[$0]);
    
break;
case 35:
        this.$ = new ast.AST_Content($$[$0])
        //var lines = $$[$0].match(/(?:\r\n?|\n).*/g)
        this.$.pos = pos(yy, _$[$0]);
    
break;
case 42:this.$ = new ast.AST_SetStmt($$[$0-2], $$[$0]);
break;
case 43:this.$ = new ast.AST_VarStmt($$[$0]);
break;
case 44:this.$ = new ast.AST_NameStmt($$[$0]);;
break;
case 45:this.$ = new ast.AST_MacroCall($$[$0-3], $$[$0-1]);;
break;
case 46:
        if (yy.getSubAst){
            //这个时候子模板的方法分析肯定已经完成了..TODO 递归怎么办?
            var subast = yy.getSubAst($$[$0]);
            this.$ = new ast.AST_Include($$[$0], subast);
        } else {
            this.$ = new ast.AST_Include($$[$0])
        }
    
break;
case 47:this.$ = new ast.AST_CSDebugger();;
break;
case 51:this.$ =new ast.AST_UnaryForceNum($$[$0-1], $$[$0])  /*强制数字表达式*/;
break;
case 54:this.$ =new ast.AST_UnaryNot($$[$0-1], $$[$0])  /*非表达式*/;
break;
case 55:this.$ =new ast.AST_UnaryExist($$[$0-1], $$[$0]) /*是否存在，TODO，不应该有这种语法，应该限定为 ?foo.bar 这种*/;
break;
case 56:this.$ =new ast.AST_Unary($$[$0-1], $$[$0])  /*比如，对于 foo + $$[$01], 其中的3是一个key，而不是数字*/;
break;
case 57:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 58:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 59:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 60:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 61:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 62:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 63:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 64:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 65:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 66:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 67:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 68:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 69:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 70:this.$ =new ast.AST_CommaExpr($$[$0-1]) /*逗号表达式*/;
break;
case 71:this.$ =$$[$0-1]  /*控制优先级用（优先被归约）*/;
break;
case 72:this.$ =[$$[$0-1]].concat($$[$0]);
break;
case 73:this.$ =$$[$0];
break;
case 74:this.$ =new ast.AST_VariableAccess($$[$0]) /*注意这里与subProp构成a[b][c][d]的访问形式*/;
break;
case 75:
        var leftTree = $$[$0]
        while(leftTree.left) leftTree = leftTree.left;
        leftTree.left = $$[$0-1];//注意下图中的 "??" 位置
        this.$ = new ast.AST_VariableAccess($$[$0]);

        /*
        debug("---------")
        debug($$[$0-1])
        */
      
break;
case 77:
        $$[$0].left = $$[$0-1]
        this.$ = $$[$0]
        /*debug_prop
        debug("<<reduce<<")
        debug($$[$0-1])
        debug($$[$0])
        */
      
break;
case 78:
        this.$ = new ast.AST_DotProp($$[$0]);
        /*debug_prop
        this.$ = $$[$0]
        */
      
break;
case 79:
        this.$ = new ast.AST_SubProp($$[$0-1]);
        /*debug_prop
        this.$ = $$[$0-1]
        */
    
break;
case 80:this.$ =$$[$0];
break;
case 81:this.$ =new ast.AST_Symbol($$[$0]) /*这个不要综合到t_variable_one里面去*/;
break;
case 82:this.$ =new ast.AST_Symbol($$[$0]);
break;
case 83:this.$ =new ast.AST_String($$[$0])      /*字面字符串*/;
break;
case 84:this.$ =$$[$0]  /*这其实是官方cs引擎的一个bug，它不支持 #"111" */;
break;
case 85:this.$ =new ast.AST_UnaryNegative($$[$0-1], $$[$0]) /*负数表达式*/;
break;
case 86:this.$ =new ast.AST_UnaryNegative($$[$0-1], $$[$0]);
break;
case 87:this.$ =$$[$0];
break;
case 88:this.$ =$$[$0];
break;
case 90:this.$ =new ast.AST_Number($$[$0]);
break;
case 91:this.$ =new ast.AST_HexNumber($$[$0]);
break;
case 92:this.$ = new ast.AST_FunctionCall($$[$0-3], $$[$0-1]);
break;
case 93:this.$ = new ast.AST_FunctionCall($$[$0-3], $$[$0-1]);
break;
case 94:this.$ =[$$[$0]];
break;
case 95:
        this.$ = [$$[$0-1]].concat($$[$0]); /*LR分析归约顺序决定第一个参数最后被规约*/
      
break;
case 96:this.$ =[];
break;
case 97:this.$ =$$[$0];
break;
case 98:this.$ = [];
break;
case 99:$$[$0-1].push($$[$0]);
break;
case 100:this.$ = [$$[$0]];
break;
case 101:$$[$0-1].push($$[$0]);
break;
case 102:this.$ = [$$[$0]];
break;
case 103:$$[$0-1].push($$[$0]);
break;
case 104:this.$ = [$$[$0]];
break;
case 105:$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[2,98],16:3,17:[2,98],27:[2,98],29:[2,98],33:[2,98],36:[2,98],40:[2,98],45:[2,98],54:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98]},{1:[3]},{5:[1,4]},{5:[2,11],6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,17:[1,17],22:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[1,18],28:[2,11],29:[1,19],32:[2,11],33:[1,21],35:[2,11],36:[1,22],39:[2,11],40:[1,20],44:[2,11],45:[1,23],50:[2,11],53:15,54:[1,16],55:24,56:25,57:26,58:27,59:28,60:29,61:[1,30],62:[1,31],63:[1,32],64:[1,33],66:[1,34],67:[1,35]},{1:[2,1]},{5:[2,99],17:[2,99],22:[2,99],24:[2,99],25:[2,99],26:[2,99],27:[2,99],28:[2,99],29:[2,99],32:[2,99],33:[2,99],35:[2,99],36:[2,99],39:[2,99],40:[2,99],44:[2,99],45:[2,99],50:[2,99],54:[2,99],61:[2,99],62:[2,99],63:[2,99],64:[2,99],66:[2,99],67:[2,99]},{5:[2,2],17:[2,2],22:[2,2],24:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],29:[2,2],32:[2,2],33:[2,2],35:[2,2],36:[2,2],39:[2,2],40:[2,2],44:[2,2],45:[2,2],50:[2,2],54:[2,2],61:[2,2],62:[2,2],63:[2,2],64:[2,2],66:[2,2],67:[2,2]},{5:[2,3],17:[2,3],22:[2,3],24:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],29:[2,3],32:[2,3],33:[2,3],35:[2,3],36:[2,3],39:[2,3],40:[2,3],44:[2,3],45:[2,3],50:[2,3],54:[2,3],61:[2,3],62:[2,3],63:[2,3],64:[2,3],66:[2,3],67:[2,3]},{5:[2,4],17:[2,4],22:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],28:[2,4],29:[2,4],32:[2,4],33:[2,4],35:[2,4],36:[2,4],39:[2,4],40:[2,4],44:[2,4],45:[2,4],50:[2,4],54:[2,4],61:[2,4],62:[2,4],63:[2,4],64:[2,4],66:[2,4],67:[2,4]},{5:[2,5],17:[2,5],22:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],28:[2,5],29:[2,5],32:[2,5],33:[2,5],35:[2,5],36:[2,5],39:[2,5],40:[2,5],44:[2,5],45:[2,5],50:[2,5],54:[2,5],61:[2,5],62:[2,5],63:[2,5],64:[2,5],66:[2,5],67:[2,5]},{5:[2,6],17:[2,6],22:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],32:[2,6],33:[2,6],35:[2,6],36:[2,6],39:[2,6],40:[2,6],44:[2,6],45:[2,6],50:[2,6],54:[2,6],61:[2,6],62:[2,6],63:[2,6],64:[2,6],66:[2,6],67:[2,6]},{5:[2,7],17:[2,7],22:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],28:[2,7],29:[2,7],32:[2,7],33:[2,7],35:[2,7],36:[2,7],39:[2,7],40:[2,7],44:[2,7],45:[2,7],50:[2,7],54:[2,7],61:[2,7],62:[2,7],63:[2,7],64:[2,7],66:[2,7],67:[2,7]},{5:[2,8],17:[2,8],22:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],32:[2,8],33:[2,8],35:[2,8],36:[2,8],39:[2,8],40:[2,8],44:[2,8],45:[2,8],50:[2,8],54:[2,8],61:[2,8],62:[2,8],63:[2,8],64:[2,8],66:[2,8],67:[2,8]},{5:[2,9],17:[2,9],22:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],32:[2,9],33:[2,9],35:[2,9],36:[2,9],39:[2,9],40:[2,9],44:[2,9],45:[2,9],50:[2,9],54:[2,9],61:[2,9],62:[2,9],63:[2,9],64:[2,9],66:[2,9],67:[2,9]},{5:[2,10],17:[2,10],22:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],28:[2,10],29:[2,10],32:[2,10],33:[2,10],35:[2,10],36:[2,10],39:[2,10],40:[2,10],44:[2,10],45:[2,10],50:[2,10],54:[2,10],61:[2,10],62:[2,10],63:[2,10],64:[2,10],66:[2,10],67:[2,10]},{19:[1,36]},{5:[2,35],17:[2,35],22:[2,35],24:[2,35],25:[2,35],26:[2,35],27:[2,35],28:[2,35],29:[2,35],32:[2,35],33:[2,35],35:[2,35],36:[2,35],39:[2,35],40:[2,35],44:[2,35],45:[2,35],50:[2,35],54:[2,35],61:[2,35],62:[2,35],63:[2,35],64:[2,35],66:[2,35],67:[2,35]},{18:37,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:57,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{30:58,99:[1,54]},{30:60,41:59,99:[1,54]},{30:61,99:[1,54]},{37:[1,62]},{46:[1,63]},{19:[2,36]},{19:[2,37]},{19:[2,38]},{19:[2,39]},{19:[2,40]},{19:[2,41]},{30:65,34:64,99:[1,54]},{18:66,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{30:65,34:67,99:[1,54]},{46:[1,68]},{19:[2,46]},{19:[2,47]},{5:[2,34],17:[2,34],22:[2,34],24:[2,34],25:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],32:[2,34],33:[2,34],35:[2,34],36:[2,34],39:[2,34],40:[2,34],44:[2,34],45:[2,34],50:[2,34],54:[2,34],61:[2,34],62:[2,34],63:[2,34],64:[2,34],66:[2,34],67:[2,34]},{19:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{19:[2,48],42:[2,48],49:[2,48],76:[2,48],77:[2,48],78:[2,48],79:[2,48],80:[2,48],81:[2,48],82:[2,48],83:[2,48],84:[2,48],85:[2,48],86:[2,48],87:[2,48],88:[2,48],97:[2,48]},{19:[2,49],42:[2,49],49:[2,49],76:[2,49],77:[2,49],78:[2,49],79:[2,49],80:[2,49],81:[2,49],82:[2,49],83:[2,49],84:[2,49],85:[2,49],86:[2,49],87:[2,49],88:[2,49],97:[2,49]},{19:[2,50],42:[2,50],49:[2,50],76:[2,50],77:[2,50],78:[2,50],79:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50],86:[2,50],87:[2,50],88:[2,50],97:[2,50]},{30:65,34:83,84:[1,86],85:[1,85],99:[1,54],100:84,101:[1,55],102:[1,56]},{19:[2,52],42:[2,52],49:[2,52],76:[2,52],77:[2,52],78:[2,52],79:[2,52],80:[2,52],81:[2,52],82:[2,52],83:[2,52],84:[2,52],85:[2,52],86:[2,52],87:[2,52],88:[2,52],97:[2,52]},{19:[2,53],42:[2,53],49:[2,53],76:[2,53],77:[2,53],78:[2,53],79:[2,53],80:[2,53],81:[2,53],82:[2,53],83:[2,53],84:[2,53],85:[2,53],86:[2,53],87:[2,53],88:[2,53],97:[2,53]},{18:87,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:88,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:89,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:91,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],89:90,99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{19:[2,74],42:[2,74],47:[1,93],49:[2,74],76:[2,74],77:[2,74],78:[2,74],79:[2,74],80:[2,74],81:[2,74],82:[2,74],83:[2,74],84:[2,74],85:[2,74],86:[2,74],87:[2,74],88:[2,74],92:92,93:94,94:[1,95],96:[1,96],97:[2,74]},{19:[2,83],42:[2,83],49:[2,83],76:[2,83],77:[2,83],78:[2,83],79:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83],86:[2,83],87:[2,83],88:[2,83],97:[2,83]},{100:97,101:[1,55],102:[1,56]},{100:98,101:[1,55],102:[1,56]},{19:[2,89],42:[2,89],49:[2,89],76:[2,89],77:[2,89],78:[2,89],79:[2,89],80:[2,89],81:[2,89],82:[2,89],83:[2,89],84:[2,89],85:[2,89],86:[2,89],87:[2,89],88:[2,89],97:[2,89]},{47:[1,99]},{19:[2,82],31:[2,82],42:[2,82],47:[2,82],49:[2,82],76:[2,82],77:[2,82],78:[2,82],79:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82],86:[2,82],87:[2,82],88:[2,82],94:[2,82],96:[2,82],97:[2,82]},{19:[2,90],42:[2,90],49:[2,90],76:[2,90],77:[2,90],78:[2,90],79:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90],86:[2,90],87:[2,90],88:[2,90],97:[2,90]},{19:[2,91],42:[2,91],49:[2,91],76:[2,91],77:[2,91],78:[2,91],79:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91],86:[2,91],87:[2,91],88:[2,91],97:[2,91]},{19:[1,100],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{31:[1,101]},{42:[1,102]},{31:[1,103]},{31:[1,104]},{19:[1,105]},{47:[1,106]},{31:[1,107]},{19:[2,74],31:[2,74],42:[2,74],49:[2,74],76:[2,74],77:[2,74],78:[2,74],79:[2,74],80:[2,74],81:[2,74],82:[2,74],83:[2,74],84:[2,74],85:[2,74],86:[2,74],87:[2,74],88:[2,74],92:92,93:94,94:[1,95],96:[1,96],97:[2,74]},{19:[2,43],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{19:[2,44]},{47:[1,108]},{4:109,16:3,17:[2,98],22:[2,98],24:[2,98],25:[2,98],26:[2,98],27:[2,98],29:[2,98],33:[2,98],36:[2,98],40:[2,98],45:[2,98],54:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98]},{18:110,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:111,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:112,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:113,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:114,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:115,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:116,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:117,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:118,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:119,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:120,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:121,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:122,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{19:[2,51],42:[2,51],49:[2,51],76:[2,51],77:[2,51],78:[2,51],79:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51],86:[2,51],87:[2,51],88:[2,51],97:[2,51]},{19:[2,84],42:[2,84],49:[2,84],76:[2,84],77:[2,84],78:[2,84],79:[2,84],80:[2,84],81:[2,84],82:[2,84],83:[2,84],84:[2,84],85:[2,84],86:[2,84],87:[2,84],88:[2,84],97:[2,84]},{100:123,101:[1,55],102:[1,56]},{100:124,101:[1,55],102:[1,56]},{19:[2,54],42:[2,54],49:[2,54],76:[2,54],77:[2,54],78:[2,54],79:[2,54],80:[2,54],81:[2,54],82:[2,54],83:[2,54],84:[2,54],85:[2,54],86:[2,54],87:[2,54],88:[2,54],97:[2,54]},{19:[2,55],42:[2,55],49:[2,55],76:[2,55],77:[2,55],78:[2,55],79:[2,55],80:[2,55],81:[2,55],82:[2,55],83:[2,55],84:[2,55],85:[2,55],86:[2,55],87:[2,55],88:[2,55],97:[2,55]},{19:[2,56],42:[2,56],49:[2,56],76:[2,56],77:[2,56],78:[2,56],79:[2,56],80:[2,56],81:[2,56],82:[2,56],83:[2,56],84:[2,56],85:[2,56],86:[2,56],87:[2,56],88:[2,56],97:[2,56]},{49:[1,125]},{42:[1,129],49:[1,126],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],90:127,91:128},{19:[2,75],31:[2,75],42:[2,75],49:[2,75],76:[2,75],77:[2,75],78:[2,75],79:[2,75],80:[2,75],81:[2,75],82:[2,75],83:[2,75],84:[2,75],85:[2,75],86:[2,75],87:[2,75],88:[2,75],93:130,94:[1,95],96:[1,96],97:[2,75]},{18:132,30:48,34:40,37:[1,49],47:[1,47],49:[2,96],65:131,68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{19:[2,76],31:[2,76],42:[2,76],49:[2,76],76:[2,76],77:[2,76],78:[2,76],79:[2,76],80:[2,76],81:[2,76],82:[2,76],83:[2,76],84:[2,76],85:[2,76],86:[2,76],87:[2,76],88:[2,76],94:[2,76],96:[2,76],97:[2,76]},{30:134,95:133,98:[1,135],99:[1,54]},{18:136,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{19:[2,86],42:[2,86],49:[2,86],76:[2,86],77:[2,86],78:[2,86],79:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86],86:[2,86],87:[2,86],88:[2,86],97:[2,86]},{19:[2,88],42:[2,88],49:[2,88],76:[2,88],77:[2,88],78:[2,88],79:[2,88],80:[2,88],81:[2,88],82:[2,88],83:[2,88],84:[2,88],85:[2,88],86:[2,88],87:[2,88],88:[2,88],97:[2,88]},{18:132,30:48,34:40,37:[1,49],47:[1,47],49:[2,96],65:137,68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{4:138,16:3,17:[2,98],27:[2,98],28:[2,98],29:[2,98],33:[2,98],36:[2,98],40:[2,98],45:[2,98],54:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98]},{18:139,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:140,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:141,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{30:65,34:142,99:[1,54]},{4:143,16:3,17:[2,98],27:[2,98],29:[2,98],33:[2,98],36:[2,98],39:[2,98],40:[2,98],45:[2,98],54:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98]},{30:145,48:144,49:[2,32],99:[1,54]},{18:146,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{18:132,30:48,34:40,37:[1,49],47:[1,47],49:[2,96],65:147,68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{20:148,22:[2,14],24:[2,14],25:[2,14],26:[2,14]},{19:[2,57],42:[2,57],49:[2,57],76:[2,57],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],97:[2,57]},{19:[2,58],42:[2,58],49:[2,58],76:[2,58],77:[2,58],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],97:[2,58]},{19:[2,59],42:[2,59],49:[2,59],76:[2,59],77:[2,59],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],97:[2,59]},{19:[2,60],42:[2,60],49:[2,60],76:[2,60],77:[2,60],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],97:[2,60]},{19:[2,61],42:[2,61],49:[2,61],76:[2,61],77:[2,61],78:[2,61],79:[2,61],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],97:[2,61]},{19:[2,62],42:[2,62],49:[2,62],76:[2,62],77:[2,62],78:[2,62],79:[2,62],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],97:[2,62]},{19:[2,63],42:[2,63],49:[2,63],76:[2,63],77:[2,63],78:[2,63],79:[2,63],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],97:[2,63]},{19:[2,64],42:[2,64],49:[2,64],76:[2,64],77:[2,64],78:[2,64],79:[2,64],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],97:[2,64]},{19:[2,65],42:[2,65],49:[2,65],76:[2,65],77:[2,65],78:[2,65],79:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65],86:[1,80],87:[1,81],88:[1,82],97:[2,65]},{19:[2,66],42:[2,66],49:[2,66],76:[2,66],77:[2,66],78:[2,66],79:[2,66],80:[2,66],81:[2,66],82:[2,66],83:[2,66],84:[2,66],85:[2,66],86:[1,80],87:[1,81],88:[1,82],97:[2,66]},{19:[2,67],42:[2,67],49:[2,67],76:[2,67],77:[2,67],78:[2,67],79:[2,67],80:[2,67],81:[2,67],82:[2,67],83:[2,67],84:[2,67],85:[2,67],86:[2,67],87:[2,67],88:[2,67],97:[2,67]},{19:[2,68],42:[2,68],49:[2,68],76:[2,68],77:[2,68],78:[2,68],79:[2,68],80:[2,68],81:[2,68],82:[2,68],83:[2,68],84:[2,68],85:[2,68],86:[2,68],87:[2,68],88:[2,68],97:[2,68]},{19:[2,69],42:[2,69],49:[2,69],76:[2,69],77:[2,69],78:[2,69],79:[2,69],80:[2,69],81:[2,69],82:[2,69],83:[2,69],84:[2,69],85:[2,69],86:[2,69],87:[2,69],88:[2,69],97:[2,69]},{19:[2,85],42:[2,85],49:[2,85],76:[2,85],77:[2,85],78:[2,85],79:[2,85],80:[2,85],81:[2,85],82:[2,85],83:[2,85],84:[2,85],85:[2,85],86:[2,85],87:[2,85],88:[2,85],97:[2,85]},{19:[2,87],42:[2,87],49:[2,87],76:[2,87],77:[2,87],78:[2,87],79:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87],86:[2,87],87:[2,87],88:[2,87],97:[2,87]},{19:[2,70],42:[2,70],49:[2,70],76:[2,70],77:[2,70],78:[2,70],79:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70],86:[2,70],87:[2,70],88:[2,70],97:[2,70]},{19:[2,71],42:[2,71],49:[2,71],76:[2,71],77:[2,71],78:[2,71],79:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71],86:[2,71],87:[2,71],88:[2,71],97:[2,71]},{42:[1,129],49:[2,72],91:149},{42:[2,102],49:[2,102]},{18:150,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{19:[2,77],31:[2,77],42:[2,77],49:[2,77],76:[2,77],77:[2,77],78:[2,77],79:[2,77],80:[2,77],81:[2,77],82:[2,77],83:[2,77],84:[2,77],85:[2,77],86:[2,77],87:[2,77],88:[2,77],94:[2,77],96:[2,77],97:[2,77]},{49:[1,151]},{42:[1,154],49:[2,94],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],104:152,105:153},{19:[2,78],31:[2,78],42:[2,78],49:[2,78],76:[2,78],77:[2,78],78:[2,78],79:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78],86:[2,78],87:[2,78],88:[2,78],94:[2,78],96:[2,78],97:[2,78]},{19:[2,80],31:[2,80],42:[2,80],49:[2,80],76:[2,80],77:[2,80],78:[2,80],79:[2,80],80:[2,80],81:[2,80],82:[2,80],83:[2,80],84:[2,80],85:[2,80],86:[2,80],87:[2,80],88:[2,80],94:[2,80],96:[2,80],97:[2,80]},{19:[2,81],31:[2,81],42:[2,81],49:[2,81],76:[2,81],77:[2,81],78:[2,81],79:[2,81],80:[2,81],81:[2,81],82:[2,81],83:[2,81],84:[2,81],85:[2,81],86:[2,81],87:[2,81],88:[2,81],94:[2,81],96:[2,81],97:[2,81]},{76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82],97:[1,155]},{49:[1,156]},{28:[1,157]},{19:[1,158],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{19:[2,28],42:[1,160],43:159,76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{42:[2,26],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{19:[1,161]},{38:162,39:[1,163]},{49:[1,164]},{42:[1,167],49:[2,30],51:165,52:166},{19:[2,42],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{49:[1,168]},{21:169,22:[2,17],23:170,24:[1,172],25:[1,173],26:[1,171]},{42:[2,103],49:[2,103]},{42:[2,73],49:[2,73],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{19:[2,93],42:[2,93],49:[2,93],76:[2,93],77:[2,93],78:[2,93],79:[2,93],80:[2,93],81:[2,93],82:[2,93],83:[2,93],84:[2,93],85:[2,93],86:[2,93],87:[2,93],88:[2,93],97:[2,93]},{42:[1,154],49:[2,95],105:174},{42:[2,104],49:[2,104]},{18:175,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{19:[2,79],31:[2,79],42:[2,79],49:[2,79],76:[2,79],77:[2,79],78:[2,79],79:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79],86:[2,79],87:[2,79],88:[2,79],94:[2,79],96:[2,79],97:[2,79]},{19:[2,92],42:[2,92],49:[2,92],76:[2,92],77:[2,92],78:[2,92],79:[2,92],80:[2,92],81:[2,92],82:[2,92],83:[2,92],84:[2,92],85:[2,92],86:[2,92],87:[2,92],88:[2,92],97:[2,92]},{19:[1,176]},{4:177,16:3,17:[2,98],27:[2,98],29:[2,98],32:[2,98],33:[2,98],36:[2,98],40:[2,98],45:[2,98],54:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98]},{19:[1,178]},{18:179,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{4:180,16:3,17:[2,98],27:[2,98],29:[2,98],33:[2,98],35:[2,98],36:[2,98],40:[2,98],45:[2,98],54:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98]},{19:[1,181]},{19:[2,23],37:[1,182]},{19:[1,183]},{42:[1,167],49:[2,31],52:184},{42:[2,100],49:[2,100]},{30:185,99:[1,54]},{19:[2,45]},{22:[1,186]},{18:187,30:48,34:40,37:[1,49],47:[1,47],68:38,69:39,70:[1,41],71:42,72:43,73:[1,44],74:[1,45],75:[1,46],84:[1,51],85:[1,50],99:[1,54],100:52,101:[1,55],102:[1,56],103:[1,53]},{19:[1,188]},{37:[2,15],47:[2,15],70:[2,15],73:[2,15],74:[2,15],75:[2,15],84:[2,15],85:[2,15],99:[2,15],101:[2,15],102:[2,15],103:[2,15]},{37:[2,16],47:[2,16],70:[2,16],73:[2,16],74:[2,16],75:[2,16],84:[2,16],85:[2,16],99:[2,16],101:[2,16],102:[2,16],103:[2,16]},{42:[2,105],49:[2,105]},{42:[2,97],49:[2,97],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{5:[2,19],17:[2,19],22:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],32:[2,19],33:[2,19],35:[2,19],36:[2,19],39:[2,19],40:[2,19],44:[2,19],45:[2,19],50:[2,19],54:[2,19],61:[2,19],62:[2,19],63:[2,19],64:[2,19],66:[2,19],67:[2,19]},{32:[1,189]},{4:190,16:3,17:[2,98],27:[2,98],29:[2,98],33:[2,98],36:[2,98],40:[2,98],44:[2,98],45:[2,98],54:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98]},{19:[2,27],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{35:[1,191]},{5:[2,22],17:[2,22],22:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],32:[2,22],33:[2,22],35:[2,22],36:[2,22],39:[2,22],40:[2,22],44:[2,22],45:[2,22],50:[2,22],54:[2,22],61:[2,22],62:[2,22],63:[2,22],64:[2,22],66:[2,22],67:[2,22]},{19:[2,24]},{4:192,16:3,17:[2,98],27:[2,98],29:[2,98],33:[2,98],36:[2,98],40:[2,98],45:[2,98],50:[2,98],54:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98]},{42:[2,101],49:[2,101]},{42:[2,33],49:[2,33]},{19:[1,193]},{19:[1,194],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],88:[1,82]},{4:195,16:3,17:[2,98],22:[2,98],27:[2,98],29:[2,98],33:[2,98],36:[2,98],40:[2,98],45:[2,98],54:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98]},{19:[1,196]},{44:[1,197]},{19:[1,198]},{50:[1,199]},{5:[2,12],17:[2,12],22:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],32:[2,12],33:[2,12],35:[2,12],36:[2,12],39:[2,12],40:[2,12],44:[2,12],45:[2,12],50:[2,12],54:[2,12],61:[2,12],62:[2,12],63:[2,12],64:[2,12],66:[2,12],67:[2,12]},{4:200,16:3,17:[2,98],22:[2,98],24:[2,98],25:[2,98],26:[2,98],27:[2,98],29:[2,98],33:[2,98],36:[2,98],40:[2,98],45:[2,98],54:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98]},{22:[2,18]},{5:[2,20],17:[2,20],22:[2,20],24:[2,20],25:[2,20],26:[2,20],27:[2,20],28:[2,20],29:[2,20],32:[2,20],33:[2,20],35:[2,20],36:[2,20],39:[2,20],40:[2,20],44:[2,20],45:[2,20],50:[2,20],54:[2,20],61:[2,20],62:[2,20],63:[2,20],64:[2,20],66:[2,20],67:[2,20]},{19:[1,201]},{5:[2,21],17:[2,21],22:[2,21],24:[2,21],25:[2,21],26:[2,21],27:[2,21],28:[2,21],29:[2,21],32:[2,21],33:[2,21],35:[2,21],36:[2,21],39:[2,21],40:[2,21],44:[2,21],45:[2,21],50:[2,21],54:[2,21],61:[2,21],62:[2,21],63:[2,21],64:[2,21],66:[2,21],67:[2,21]},{19:[1,202]},{22:[2,13],24:[2,13],25:[2,13],26:[2,13]},{5:[2,25],17:[2,25],22:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],32:[2,25],33:[2,25],35:[2,25],36:[2,25],39:[2,25],40:[2,25],44:[2,25],45:[2,25],50:[2,25],54:[2,25],61:[2,25],62:[2,25],63:[2,25],64:[2,25],66:[2,25],67:[2,25]},{5:[2,29],17:[2,29],22:[2,29],24:[2,29],25:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],32:[2,29],33:[2,29],35:[2,29],36:[2,29],39:[2,29],40:[2,29],44:[2,29],45:[2,29],50:[2,29],54:[2,29],61:[2,29],62:[2,29],63:[2,29],64:[2,29],66:[2,29],67:[2,29]}],
defaultActions: {4:[2,1],24:[2,36],25:[2,37],26:[2,38],27:[2,39],28:[2,40],29:[2,41],34:[2,46],35:[2,47],67:[2,44],168:[2,45],182:[2,24],195:[2,18]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var ast = require("./ast");

    //helper function
    function print(_){
        //console.log(_);
    }
    function debug(_){
        console.log(_);
    }
    function pos(yy, $pos, $pos2){
        var _p = {};
        for(var i in $pos){
            if ($pos.hasOwnProperty(i)){
                _p[i] = $pos[i]
            }
        }
        if ($pos2) {
            _p.last_line = $pos2.last_line;
            _p.last_column = $pos2.last_column;
        }
        _p.fileid = yy.fileid;//自定义的属性，这是文件名
        return _p;
    }


//console.log("start compile ...")

/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 */
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

    var r_macroSymbol = /[\w\d\-_\+\/\*%!@\$]/,
        r_ltrim = /^\s+/,
        r_rtrim = /\s+$/;

    function trim(str){
        return (str + "").replace(r_ltrim, "").replace(r_rtrim, "");
    }


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    this.begin("ST_CS_START");
    //return "TAG_START";//加入TAG_START token让语法分析会变得麻烦，LALR(1)只能向前查看一个token

break;
case 1:
    //都是注释
    this.popState();

break;
case 2:
    this.popState();
    this.begin("ST_EXTEND_CS");
    return "T_DEBUGGER";

break;
case 3:
    this.unput(yy_.yytext);
    this.popState();
    this.begin("ST_CS");

break;
case 4:
    var index = yy_.yytext.indexOf(":");
    if (index >= 0){
        yy_.yytext = trim(yy_.yytext.substring(0, index));
    }
    if (yy_.yytext == "def" || yy_.yytext == "call"){
        this.begin("ST_CS_MACRO_SYMBOL");
    } else if (yy_.yytext == "/escape"){
        //非常怪，居然有两种写法
        return "T_END_ESCAPE";
    } else if (yy_.yytext == "include"){
        this.begin("ST_CS_INCLUDE");
        return;//include 只影响词法分析
    }

    return "T_" + yy_.yytext.toUpperCase();

break;
case 5:
    //jison不能很好第支持include，这需要修改它（使用一个修改过的jison)
    this.popState();
    yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length - 1);

    if (typeof this.include == "function") {
        this.include(yy_.yytext);
    }
    return "T_INCLUDE";

break;
case 6:
    yy_.yytext = trim(yy_.yytext);
    this.popState();
    return "T_MACRO_NAME"

break;
case 7:
    print(yy_.yytext);
    return "T_ELSE";

break;
case 8:
    return "T_END_IF";

break;
case 9:
    return "T_END_EACH";

break;
case 10:
    return "T_END_LOOP";

break;
case 11:
    return "T_END_ALT";

break;
case 12:
    return "T_END_WITH";

break;
case 13:
    return "T_END_MACRO_DEF"

break;
case 14:
    return "T_END_ESCAPE";

break;
case 15:
    //支持 string.length这样的function
    return "T_FUN_NAME";

break;
case 16:
    print(yy_.yytext);
    this.begin("ST_END_VARIABEL");
    return "T_VARIABLE";

break;
case 17:
    this.popState();
    if (yy_.yytext == "."){
        this.begin("ST_VARIABLE_PROP");
        print(yy_.yytext);
        return yy_.yytext;
    }
    this.unput(yy_.yytext);

break;
case 18:
    this.popState();//弹掉状态,表示处理完属性
    this.begin("ST_END_VARIABEL");//当前属性是新的variable
    return "T_VARIABLE"

break;
case 19:
    this.popState();//弹掉状态,表示处理完属性
    this.begin("ST_END_VARIABEL");//当前属性是新的variable
    return "PROP_NUMBER"

break;
case 20:
    //非label和数字就要返回到正常状态,并退回吃掉的字符
    this.popState();
    this.unput(yy_.yytext);

break;
case 21:
    return "NUMBER_HEX"

break;
case 22:
    print(yy_.yytext);
    return "NUMBER";

break;
case 23:
    var quote = yy_.yytext;
    yy_.yytext = "";//扔掉引号
    if (this.enableEscapedString){//原cs引擎不支持\\,\",\'，所以留个开关
        while(true){
            var ch = this._input[0];
            if (ch == "\\"){
                this.input();
                yy_.yytext = yy_.yytext.substring(0, yy_.yytext.length - 1);//跳过 "\\"，取后面的转义字符
                this.input();
            } else if (ch == quote){
                this.input();//字符串结束
                yy_.yytext = yy_.yytext.substring(0, yy_.yytext.length - 1);//吃进来的字符串要丢掉
                break;
            } else if (ch !== undefined) {
                this.input();
            } else {
                //到文件末尾，留给语法分析出错
                break;
            }
        }
    } else {
        while(true){
            var ch = this._input[0];
            if (ch == quote){
                this.input();//字符串结束
                yy_.yytext = yy_.yytext.substring(0, yy_.yytext.length - 1);//吃进来的字符串要丢掉
                break;
            } else if (ch !== undefined){
                this.input();//吃进更多的字符
            } else {
                break;
            }
        }
    }
    print(yy_.yytext);
    return "STRING";

break;
case 24:
    print(yy_.yytext);
    return "T_IS_EQUAL";

break;
case 25:
    print(yy_.yytext);
    return "T_IS_NOT_EQUAL";

break;
case 26:
    print(yy_.yytext);
    return "T_IS_GREATER_OR_EQUAL";

break;
case 27:
    print(yy_.yytext);
    return "T_IS_SMALLER_OR_EQUAL";

break;
case 28:
    print(yy_.yytext);
    return "T_BOOLEAN_OR"

break;
case 29:
    print(yy_.yytext);
    return "T_BOOLEAN_AND"

break;
case 30:
    print(yy_.yytext);
    if (yy_.yytext == ']'){
        this.begin("ST_END_BRACKET");
    }
    return yy_.yytext;

break;
case 31:
    //特殊处理 ".", number can property in hdf
    this.popState();
    print(yy_.yytext);
    if (yy_.yytext == "."){
        this.begin("ST_VARIABLE_PROP");
        return yy_.yytext;
    }
    this.unput(yy_.yytext);

break;
case 32:
    //ignore whitespace

break;
case 33:
    this.popState();
    return "TAG_END";

break;
case 34:
    this.popState();
    return "TAG_END";

break;
case 35:
    return "CONTENT";

break;
case 36:return "EOF";
break;
case 37:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(<\?cs))/,/^(?:\s+#(?!debugger\s*)([^])*?(\?>))/,/^(?:\s+#debugger\s*([^])*?(?=(\?>)))/,/^(?:[^#])/,/^(?:\s+((var|evar|lvar|set|name|include|if|elif|elseif|alt|each|loop|with|def|call|escape|\/escape))\s*:\s*)/,/^(?:(['"]).*?\1)/,/^(?:([\w\d\-_\+\/\*%!@\$])+(?:\.([\w\d\-_\+\/\*%!@\$])+)*\s*(?=\())/,/^(?:else)/,/^(?:\/if)/,/^(?:\/each)/,/^(?:\/loop)/,/^(?:\/alt)/,/^(?:\/with)/,/^(?:\/def)/,/^(?:\/escape)/,/^(?:([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)(?:\.([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))+(?=\s*\())/,/^(?:([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))/,/^(?:([^]))/,/^(?:([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))/,/^(?:([0-9]+))/,/^(?:[^0-9a-zA-Z_\x7f-\xff])/,/^(?:(0x[0-9a-fA-F]+))/,/^(?:(([0-9]*\.[0-9]+)|([0-9]+\.[0-9]*))|([0-9]+))/,/^(?:\B['"])/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:([\#,.\[\]()+-/\*=%!<>?$]))/,/^(?:([^]))/,/^(?:\s+)/,/^(?:(\?>))/,/^(?:(\?>))/,/^(?:(?!(<\?cs))([^])+?(?=(<\?cs)|$))/,/^(?:$)/,/^(?:.)/],
conditions: {"ST_CS_START":{"rules":[1,2,3],"inclusive":false},"ST_CS":{"rules":[4,7,8,9,10,11,12,13,14,15,16,21,22,23,24,25,26,27,28,29,30,32,34],"inclusive":false},"ST_EXTEND_CS":{"rules":[33],"inclusive":false},"ST_END_BRACKET":{"rules":[31],"inclusive":false},"ST_END_VARIABEL":{"rules":[17],"inclusive":false},"ST_VARIABLE_PROP":{"rules":[18,19,20],"inclusive":false},"ST_CS_MACRO_SYMBOL":{"rules":[6],"inclusive":false},"ST_CS_INCLUDE":{"rules":[5],"inclusive":false},"INITIAL":{"rules":[0,35,36,37],"inclusive":true}}
};
/**
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 */;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = clearsilver;
exports.Parser = clearsilver.Parser;
exports.parse = function () { return clearsilver.parse.apply(clearsilver, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}