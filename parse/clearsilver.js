/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/

var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"cs":3,"inner_statement_list":4,"EOF":5,"statement":6,"block":7,"single_stmt":8,"if":9,"alt":10,"each":11,"loop":12,"with":13,"escape":14,"macro_def":15,"inner_statement_list_repetition0":16,"T_IF":17,"expr":18,"elif_list":19,"else_single":20,"T_END_IF":21,"T_ELIF":22,"T_ELSE":23,"T_ALT":24,"T_END_ALT":25,"T_EACH":26,"t_variable_one":27,"=":28,"T_END_EACH":29,"T_WITH":30,"base_variable":31,"T_END_WITH":32,"T_ESCAPE":33,"STRING":34,"escape_end":35,"T_END_ESCAPE":36,"T_LOOP":37,"loop_init_expr":38,",":39,"loop_step":40,"T_END_LOOP":41,"T_DEF":42,"T_MACRO_NAME":43,"(":44,"def_formal_parameters":45,")":46,"T_END_MACRO_DEF":47,"def_formal_parameters_repetition_plus0":48,"more_parameter":49,"macro_call":50,"T_CALL":51,"parameter_list":52,"content":53,"set_stmt":54,"var_stmt":55,"name_stmt":56,"CONTENT":57,"T_SET":58,"T_VAR":59,"T_NAME":60,"variable":61,"expr_basic":62,"const_variable":63,"function_call":64,"!":65,"?":66,"#":67,"$":68,"-":69,"+":70,"T_BOOLEAN_OR":71,"T_BOOLEAN_AND":72,"T_IS_EQUAL":73,"T_IS_NOT_EQUAL":74,"<":75,">":76,"T_IS_SMALLER_OR_EQUAL":77,"T_IS_GREATER_OR_EQUAL":78,"*":79,"/":80,"%":81,"comma_expr":82,"comma_expr_repetition_plus0":83,"comma_expr_more":84,"t_properties":85,"t_property":86,".":87,"t_label":88,"[":89,"]":90,"NUMBER":91,"T_VARIABLE":92,"T_FUN_NAME":93,"parameter_list_repetition_plus0":94,"more_parameter_list":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"T_IF",21:"T_END_IF",22:"T_ELIF",23:"T_ELSE",24:"T_ALT",25:"T_END_ALT",26:"T_EACH",28:"=",29:"T_END_EACH",30:"T_WITH",32:"T_END_WITH",33:"T_ESCAPE",34:"STRING",36:"T_END_ESCAPE",37:"T_LOOP",39:",",41:"T_END_LOOP",42:"T_DEF",43:"T_MACRO_NAME",44:"(",46:")",47:"T_END_MACRO_DEF",51:"T_CALL",57:"CONTENT",58:"T_SET",59:"T_VAR",60:"T_NAME",65:"!",66:"?",67:"#",68:"$",69:"-",70:"+",71:"T_BOOLEAN_OR",72:"T_BOOLEAN_AND",73:"T_IS_EQUAL",74:"T_IS_NOT_EQUAL",75:"<",76:">",77:"T_IS_SMALLER_OR_EQUAL",78:"T_IS_GREATER_OR_EQUAL",79:"*",80:"/",81:"%",87:".",89:"[",90:"]",91:"NUMBER",92:"T_VARIABLE",93:"T_FUN_NAME"},
productions_: [0,[3,2],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[4,1],[9,6],[19,4],[19,0],[20,0],[20,2],[10,4],[11,6],[13,6],[14,4],[35,1],[35,2],[12,8],[38,1],[38,3],[40,1],[15,7],[45,1],[45,2],[45,0],[49,2],[50,5],[8,1],[8,1],[8,1],[8,1],[8,1],[53,1],[54,4],[55,2],[56,2],[18,1],[18,1],[61,1],[61,1],[61,1],[62,2],[62,2],[62,2],[62,2],[62,2],[62,2],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[82,2],[84,2],[31,1],[31,2],[85,1],[85,2],[86,2],[86,3],[88,1],[88,1],[27,1],[63,1],[63,1],[64,4],[64,4],[52,1],[52,2],[52,0],[95,2],[16,0],[16,2],[48,1],[48,2],[83,1],[83,2],[94,1],[94,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new ast.AST_Program($$[$0-1]) 
break;
case 12:
        var ifRootAlternate;
        if ($$[$0-2]){
            /*如果有elif*/
            /*error: $$[$0-2].alternate = $$[$0-1]*/
            var elifstmt = $$[$0-2];
            while (elifstmt.alternate){
                elifstmt = elifstmt.alternate;
            };
            elifstmt.alternate = $$[$0-1];

            ifRootAlternate = $$[$0-2]
        } else {
            ifRootAlternate = $$[$0-1]
        }
        this.$ = new ast.AST_If($$[$0-3], $$[$0-4], ifRootAlternate);
      
break;
case 13:
        var alternate = new ast.AST_If($$[$0], $$[$0-1]);
        if ($$[$0-3]){
            $$[$0-3].alternate = alternate;
            this.$ = $$[$0-3];
        } else {
            this.$ = alternate;
        }
      
break;
case 16:this.$ = new ast.AST_Block($$[$0]);
break;
case 17:this.$ =new ast.AST_Alt($$[$0-2], $$[$0-1]);
break;
case 18:this.$ =new ast.AST_Each($$[$0-1], $$[$0-4], $$[$0-2]);
break;
case 19:this.$ =new ast.AST_With($$[$0-1], $$[$0-4], $$[$0-2]);
break;
case 20:
        //check surpport 'html' and 'js' , 'url'
        this.$ = new ast.AST_Escape($$[$0-1], $$[$0-2]);
      
break;
case 23:this.$ =new ast.AST_Loop($$[$0-1], $$[$0-6], $$[$0-4], $$[$0-2]);;
break;
case 25:
        $$[$0-2].initValue = $$[$0];
        this.$ = $$[$0-2];
      
break;
case 27:
        this.$ = new ast.AST_MacroDef($$[$0-1], $$[$0-5], $$[$0-3]);
      
break;
case 28:this.$ =[$$[$0]];
break;
case 29:this.$ =[$$[$0-1]].concat($$[$0]);
break;
case 30:this.$ =[];
break;
case 31:this.$ =$$[$0];
break;
case 32:this.$ =new ast.AST_MacroCall($$[$0-3], $$[$0-1]);;
break;
case 38:
        this.$ = new ast.AST_Content($$[$0])
    
break;
case 39:this.$ =new ast.AST_SetStmt($$[$0-2], $$[$0]);
break;
case 40:
        this.$ = new ast.AST_VarStmt($$[$0])
      
break;
case 41:this.$ =new ast.AST_NameStmt($$[$0]);;
break;
case 47:this.$ =new ast.AST_UnaryNot($$[$0-1], $$[$0])  /*非表达式*/;
break;
case 48:this.$ =new ast.AST_UnaryExist($$[$0-1], $$[$0])    /*是否存在*/;
break;
case 49:this.$ =new ast.AST_UnaryForceNum($$[$0-1], $$[$0])  /*强制数字表达式*/;
break;
case 50:this.$ =new ast.AST_Unary($$[$0-1], $$[$0])  /*TODO 不知道这个操作符的意义*/;
break;
case 51:this.$ =new ast.AST_UnaryNegative($$[$0-1], $$[$0]) /*负数表达式*/;
break;
case 52:this.$ =new ast.AST_UnaryPositive($$[$0-1], $$[$0]) /*正数表达式*/;
break;
case 53:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 54:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 55:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 56:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 57:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 58:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 59:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 60:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 61:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 62:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 63:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 64:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 65:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 66:this.$ =new ast.AST_CommaExpr($$[$0-1]) /*逗号表达式*/;
break;
case 67:this.$ =$$[$0-1]  /*控制优先级用（优先被归约）*/;
break;
case 68:this.$ =[$$[$0-1]].concat($$[$0]);
break;
case 69:this.$ =$$[$0];
break;
case 70:this.$ =new ast.AST_VariableAccess($$[$0]) /*注意这里与subProp构成a[b][c][d]的访问形式*/;
break;
case 71:
        var leftTree = $$[$0]
        while(leftTree.left) leftTree = leftTree.left;
        leftTree.left = $$[$0-1];//注意下图中的 "??" 位置
        this.$ = new ast.AST_VariableAccess($$[$0]);

        /*
        debug("---------")
        debug($$[$0-1])
        */
      
break;
case 73:
        $$[$0].left = $$[$0-1]
        this.$ = $$[$0]
        /*debug_prop
        debug("<<reduce<<")
        debug($$[$0-1])
        debug($$[$0])
        */
      
break;
case 74:
        this.$ = new ast.AST_DotProp($$[$0]);
        /*debug_prop
        this.$ = $$[$0]
        */
      
break;
case 75:
        this.$ = new ast.AST_SubProp($$[$0-1]);
        /*debug_prop
        this.$ = $$[$0-1]
        */
    
break;
case 76:this.$ =$$[$0];
break;
case 77:this.$ =new ast.AST_Number($$[$0]);
break;
case 78:this.$ =new ast.AST_Symbol($$[$0]);
break;
case 79:this.$ =new ast.AST_String($$[$0])      /*字面字符串*/;
break;
case 80:this.$ =new ast.AST_Number($$[$0]);
break;
case 81:this.$ = new ast.AST_FunctionCall($$[$0-3], $$[$0-1]);
break;
case 82:this.$ = new ast.AST_FunctionCall($$[$0-3], $$[$0-1]);
break;
case 83:this.$ =[$$[$0]];
break;
case 84:
        this.$ = [$$[$0-1]].concat($$[$0]); /*LR分析归约顺序决定第一个参数最后被规约*/
      
break;
case 85:this.$ =[];
break;
case 86:this.$ =$$[$0];
break;
case 87:this.$ = [];
break;
case 88:$$[$0-1].push($$[$0]);
break;
case 89:this.$ = [$$[$0]];
break;
case 90:$$[$0-1].push($$[$0]);
break;
case 91:this.$ = [$$[$0]];
break;
case 92:$$[$0-1].push($$[$0]);
break;
case 93:this.$ = [$$[$0]];
break;
case 94:$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[2,87],16:3,17:[2,87],24:[2,87],26:[2,87],30:[2,87],33:[2,87],37:[2,87],42:[2,87],51:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87]},{1:[3]},{5:[1,4]},{5:[2,11],6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,17:[1,20],21:[2,11],22:[2,11],23:[2,11],24:[1,21],25:[2,11],26:[1,22],29:[2,11],30:[1,24],32:[2,11],33:[1,25],36:[2,11],37:[1,23],41:[2,11],42:[1,26],47:[2,11],50:19,51:[1,31],53:15,54:16,55:17,56:18,57:[1,27],58:[1,28],59:[1,29],60:[1,30]},{1:[2,1]},{5:[2,88],17:[2,88],21:[2,88],22:[2,88],23:[2,88],24:[2,88],25:[2,88],26:[2,88],29:[2,88],30:[2,88],32:[2,88],33:[2,88],36:[2,88],37:[2,88],41:[2,88],42:[2,88],47:[2,88],51:[2,88],57:[2,88],58:[2,88],59:[2,88],60:[2,88]},{5:[2,2],17:[2,2],21:[2,2],22:[2,2],23:[2,2],24:[2,2],25:[2,2],26:[2,2],29:[2,2],30:[2,2],32:[2,2],33:[2,2],36:[2,2],37:[2,2],41:[2,2],42:[2,2],47:[2,2],51:[2,2],57:[2,2],58:[2,2],59:[2,2],60:[2,2]},{5:[2,3],17:[2,3],21:[2,3],22:[2,3],23:[2,3],24:[2,3],25:[2,3],26:[2,3],29:[2,3],30:[2,3],32:[2,3],33:[2,3],36:[2,3],37:[2,3],41:[2,3],42:[2,3],47:[2,3],51:[2,3],57:[2,3],58:[2,3],59:[2,3],60:[2,3]},{5:[2,4],17:[2,4],21:[2,4],22:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],29:[2,4],30:[2,4],32:[2,4],33:[2,4],36:[2,4],37:[2,4],41:[2,4],42:[2,4],47:[2,4],51:[2,4],57:[2,4],58:[2,4],59:[2,4],60:[2,4]},{5:[2,5],17:[2,5],21:[2,5],22:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],29:[2,5],30:[2,5],32:[2,5],33:[2,5],36:[2,5],37:[2,5],41:[2,5],42:[2,5],47:[2,5],51:[2,5],57:[2,5],58:[2,5],59:[2,5],60:[2,5]},{5:[2,6],17:[2,6],21:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],29:[2,6],30:[2,6],32:[2,6],33:[2,6],36:[2,6],37:[2,6],41:[2,6],42:[2,6],47:[2,6],51:[2,6],57:[2,6],58:[2,6],59:[2,6],60:[2,6]},{5:[2,7],17:[2,7],21:[2,7],22:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],29:[2,7],30:[2,7],32:[2,7],33:[2,7],36:[2,7],37:[2,7],41:[2,7],42:[2,7],47:[2,7],51:[2,7],57:[2,7],58:[2,7],59:[2,7],60:[2,7]},{5:[2,8],17:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],29:[2,8],30:[2,8],32:[2,8],33:[2,8],36:[2,8],37:[2,8],41:[2,8],42:[2,8],47:[2,8],51:[2,8],57:[2,8],58:[2,8],59:[2,8],60:[2,8]},{5:[2,9],17:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],29:[2,9],30:[2,9],32:[2,9],33:[2,9],36:[2,9],37:[2,9],41:[2,9],42:[2,9],47:[2,9],51:[2,9],57:[2,9],58:[2,9],59:[2,9],60:[2,9]},{5:[2,10],17:[2,10],21:[2,10],22:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],29:[2,10],30:[2,10],32:[2,10],33:[2,10],36:[2,10],37:[2,10],41:[2,10],42:[2,10],47:[2,10],51:[2,10],57:[2,10],58:[2,10],59:[2,10],60:[2,10]},{5:[2,33],17:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],29:[2,33],30:[2,33],32:[2,33],33:[2,33],36:[2,33],37:[2,33],41:[2,33],42:[2,33],47:[2,33],51:[2,33],57:[2,33],58:[2,33],59:[2,33],60:[2,33]},{5:[2,34],17:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],29:[2,34],30:[2,34],32:[2,34],33:[2,34],36:[2,34],37:[2,34],41:[2,34],42:[2,34],47:[2,34],51:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34]},{5:[2,35],17:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],29:[2,35],30:[2,35],32:[2,35],33:[2,35],36:[2,35],37:[2,35],41:[2,35],42:[2,35],47:[2,35],51:[2,35],57:[2,35],58:[2,35],59:[2,35],60:[2,35]},{5:[2,36],17:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],29:[2,36],30:[2,36],32:[2,36],33:[2,36],36:[2,36],37:[2,36],41:[2,36],42:[2,36],47:[2,36],51:[2,36],57:[2,36],58:[2,36],59:[2,36],60:[2,36]},{5:[2,37],17:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],29:[2,37],30:[2,37],32:[2,37],33:[2,37],36:[2,37],37:[2,37],41:[2,37],42:[2,37],47:[2,37],51:[2,37],57:[2,37],58:[2,37],59:[2,37],60:[2,37]},{18:32,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:50,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{27:51,92:[1,49]},{27:53,38:52,92:[1,49]},{27:54,92:[1,49]},{34:[1,55]},{43:[1,56]},{5:[2,38],17:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],29:[2,38],30:[2,38],32:[2,38],33:[2,38],36:[2,38],37:[2,38],41:[2,38],42:[2,38],47:[2,38],51:[2,38],57:[2,38],58:[2,38],59:[2,38],60:[2,38]},{27:58,31:57,92:[1,49]},{18:59,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{27:58,31:60,92:[1,49]},{43:[1,61]},{4:62,16:3,17:[2,87],21:[2,87],22:[2,87],23:[2,87],24:[2,87],26:[2,87],30:[2,87],33:[2,87],37:[2,87],42:[2,87],51:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{5:[2,42],17:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],29:[2,42],30:[2,42],32:[2,42],33:[2,42],36:[2,42],37:[2,42],39:[2,42],41:[2,42],42:[2,42],46:[2,42],47:[2,42],51:[2,42],57:[2,42],58:[2,42],59:[2,42],60:[2,42],69:[2,42],70:[2,42],71:[2,42],72:[2,42],73:[2,42],74:[2,42],75:[2,42],76:[2,42],77:[2,42],78:[2,42],79:[2,42],80:[2,42],81:[2,42],90:[2,42]},{5:[2,43],17:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],29:[2,43],30:[2,43],32:[2,43],33:[2,43],36:[2,43],37:[2,43],39:[2,43],41:[2,43],42:[2,43],46:[2,43],47:[2,43],51:[2,43],57:[2,43],58:[2,43],59:[2,43],60:[2,43],69:[2,43],70:[2,43],71:[2,43],72:[2,43],73:[2,43],74:[2,43],75:[2,43],76:[2,43],77:[2,43],78:[2,43],79:[2,43],80:[2,43],81:[2,43],90:[2,43]},{5:[2,44],17:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],29:[2,44],30:[2,44],32:[2,44],33:[2,44],36:[2,44],37:[2,44],39:[2,44],41:[2,44],42:[2,44],46:[2,44],47:[2,44],51:[2,44],57:[2,44],58:[2,44],59:[2,44],60:[2,44],69:[2,44],70:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44],75:[2,44],76:[2,44],77:[2,44],78:[2,44],79:[2,44],80:[2,44],81:[2,44],90:[2,44]},{5:[2,45],17:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],29:[2,45],30:[2,45],32:[2,45],33:[2,45],36:[2,45],37:[2,45],39:[2,45],41:[2,45],42:[2,45],46:[2,45],47:[2,45],51:[2,45],57:[2,45],58:[2,45],59:[2,45],60:[2,45],69:[2,45],70:[2,45],71:[2,45],72:[2,45],73:[2,45],74:[2,45],75:[2,45],76:[2,45],77:[2,45],78:[2,45],79:[2,45],80:[2,45],81:[2,45],90:[2,45]},{5:[2,46],17:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],29:[2,46],30:[2,46],32:[2,46],33:[2,46],36:[2,46],37:[2,46],39:[2,46],41:[2,46],42:[2,46],46:[2,46],47:[2,46],51:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46],69:[2,46],70:[2,46],71:[2,46],72:[2,46],73:[2,46],74:[2,46],75:[2,46],76:[2,46],77:[2,46],78:[2,46],79:[2,46],80:[2,46],81:[2,46],90:[2,46]},{18:76,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:77,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:78,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:79,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:80,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:81,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:83,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],82:82,91:[1,47],92:[1,49],93:[1,48]},{5:[2,70],17:[2,70],21:[2,70],22:[2,70],23:[2,70],24:[2,70],25:[2,70],26:[2,70],29:[2,70],30:[2,70],32:[2,70],33:[2,70],36:[2,70],37:[2,70],39:[2,70],41:[2,70],42:[2,70],44:[1,85],46:[2,70],47:[2,70],51:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],69:[2,70],70:[2,70],71:[2,70],72:[2,70],73:[2,70],74:[2,70],75:[2,70],76:[2,70],77:[2,70],78:[2,70],79:[2,70],80:[2,70],81:[2,70],85:84,86:86,87:[1,87],89:[1,88],90:[2,70]},{5:[2,79],17:[2,79],21:[2,79],22:[2,79],23:[2,79],24:[2,79],25:[2,79],26:[2,79],29:[2,79],30:[2,79],32:[2,79],33:[2,79],36:[2,79],37:[2,79],39:[2,79],41:[2,79],42:[2,79],46:[2,79],47:[2,79],51:[2,79],57:[2,79],58:[2,79],59:[2,79],60:[2,79],69:[2,79],70:[2,79],71:[2,79],72:[2,79],73:[2,79],74:[2,79],75:[2,79],76:[2,79],77:[2,79],78:[2,79],79:[2,79],80:[2,79],81:[2,79],90:[2,79]},{5:[2,80],17:[2,80],21:[2,80],22:[2,80],23:[2,80],24:[2,80],25:[2,80],26:[2,80],29:[2,80],30:[2,80],32:[2,80],33:[2,80],36:[2,80],37:[2,80],39:[2,80],41:[2,80],42:[2,80],46:[2,80],47:[2,80],51:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],69:[2,80],70:[2,80],71:[2,80],72:[2,80],73:[2,80],74:[2,80],75:[2,80],76:[2,80],77:[2,80],78:[2,80],79:[2,80],80:[2,80],81:[2,80],90:[2,80]},{44:[1,89]},{5:[2,78],17:[2,78],21:[2,78],22:[2,78],23:[2,78],24:[2,78],25:[2,78],26:[2,78],28:[2,78],29:[2,78],30:[2,78],32:[2,78],33:[2,78],36:[2,78],37:[2,78],39:[2,78],41:[2,78],42:[2,78],44:[2,78],46:[2,78],47:[2,78],51:[2,78],57:[2,78],58:[2,78],59:[2,78],60:[2,78],69:[2,78],70:[2,78],71:[2,78],72:[2,78],73:[2,78],74:[2,78],75:[2,78],76:[2,78],77:[2,78],78:[2,78],79:[2,78],80:[2,78],81:[2,78],87:[2,78],89:[2,78],90:[2,78]},{4:90,16:3,17:[2,87],24:[2,87],25:[2,87],26:[2,87],30:[2,87],33:[2,87],37:[2,87],42:[2,87],51:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{28:[1,91]},{39:[1,92]},{28:[1,93],39:[2,24]},{28:[1,94]},{4:95,16:3,17:[2,87],24:[2,87],26:[2,87],30:[2,87],33:[2,87],36:[2,87],37:[2,87],42:[2,87],51:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87]},{44:[1,96]},{28:[1,97]},{5:[2,70],17:[2,70],21:[2,70],22:[2,70],23:[2,70],24:[2,70],25:[2,70],26:[2,70],28:[2,70],29:[2,70],30:[2,70],32:[2,70],33:[2,70],36:[2,70],37:[2,70],41:[2,70],42:[2,70],47:[2,70],51:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],85:84,86:86,87:[1,87],89:[1,88]},{5:[2,40],17:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],29:[2,40],30:[2,40],32:[2,40],33:[2,40],36:[2,40],37:[2,40],41:[2,40],42:[2,40],47:[2,40],51:[2,40],57:[2,40],58:[2,40],59:[2,40],60:[2,40],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{5:[2,41],17:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],29:[2,41],30:[2,41],32:[2,41],33:[2,41],36:[2,41],37:[2,41],41:[2,41],42:[2,41],47:[2,41],51:[2,41],57:[2,41],58:[2,41],59:[2,41],60:[2,41]},{44:[1,98]},{19:99,21:[2,14],22:[2,14],23:[2,14]},{18:100,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:101,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:102,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:103,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:104,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:105,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:106,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:107,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:108,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:109,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:110,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:111,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:112,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{5:[2,47],17:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],29:[2,47],30:[2,47],32:[2,47],33:[2,47],36:[2,47],37:[2,47],39:[2,47],41:[2,47],42:[2,47],46:[2,47],47:[2,47],51:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],69:[2,47],70:[2,47],71:[2,47],72:[2,47],73:[2,47],74:[2,47],75:[2,47],76:[2,47],77:[2,47],78:[2,47],79:[2,47],80:[2,47],81:[2,47],90:[2,47]},{5:[2,48],17:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],29:[2,48],30:[2,48],32:[2,48],33:[2,48],36:[2,48],37:[2,48],39:[2,48],41:[2,48],42:[2,48],46:[2,48],47:[2,48],51:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],69:[2,48],70:[2,48],71:[2,48],72:[2,48],73:[2,48],74:[2,48],75:[2,48],76:[2,48],77:[2,48],78:[2,48],79:[2,48],80:[2,48],81:[2,48],90:[2,48]},{5:[2,49],17:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],29:[2,49],30:[2,49],32:[2,49],33:[2,49],36:[2,49],37:[2,49],39:[2,49],41:[2,49],42:[2,49],46:[2,49],47:[2,49],51:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49],69:[2,49],70:[2,49],71:[2,49],72:[2,49],73:[2,49],74:[2,49],75:[2,49],76:[2,49],77:[2,49],78:[2,49],79:[2,49],80:[2,49],81:[2,49],90:[2,49]},{5:[2,50],17:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],29:[2,50],30:[2,50],32:[2,50],33:[2,50],36:[2,50],37:[2,50],39:[2,50],41:[2,50],42:[2,50],46:[2,50],47:[2,50],51:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],69:[2,50],70:[2,50],71:[2,50],72:[2,50],73:[2,50],74:[2,50],75:[2,50],76:[2,50],77:[2,50],78:[2,50],79:[2,50],80:[2,50],81:[2,50],90:[2,50]},{5:[2,51],17:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],29:[2,51],30:[2,51],32:[2,51],33:[2,51],36:[2,51],37:[2,51],39:[2,51],41:[2,51],42:[2,51],46:[2,51],47:[2,51],51:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51],69:[2,51],70:[2,51],71:[2,51],72:[2,51],73:[2,51],74:[2,51],75:[2,51],76:[2,51],77:[2,51],78:[2,51],79:[2,51],80:[2,51],81:[2,51],90:[2,51]},{5:[2,52],17:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],29:[2,52],30:[2,52],32:[2,52],33:[2,52],36:[2,52],37:[2,52],39:[2,52],41:[2,52],42:[2,52],46:[2,52],47:[2,52],51:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],69:[2,52],70:[2,52],71:[2,52],72:[2,52],73:[2,52],74:[2,52],75:[2,52],76:[2,52],77:[2,52],78:[2,52],79:[2,52],80:[2,52],81:[2,52],90:[2,52]},{46:[1,113]},{39:[1,117],46:[1,114],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75],83:115,84:116},{5:[2,71],17:[2,71],21:[2,71],22:[2,71],23:[2,71],24:[2,71],25:[2,71],26:[2,71],28:[2,71],29:[2,71],30:[2,71],32:[2,71],33:[2,71],36:[2,71],37:[2,71],39:[2,71],41:[2,71],42:[2,71],46:[2,71],47:[2,71],51:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],69:[2,71],70:[2,71],71:[2,71],72:[2,71],73:[2,71],74:[2,71],75:[2,71],76:[2,71],77:[2,71],78:[2,71],79:[2,71],80:[2,71],81:[2,71],86:118,87:[1,87],89:[1,88],90:[2,71]},{18:120,27:45,31:35,34:[1,46],44:[1,44],46:[2,85],52:119,61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{5:[2,72],17:[2,72],21:[2,72],22:[2,72],23:[2,72],24:[2,72],25:[2,72],26:[2,72],28:[2,72],29:[2,72],30:[2,72],32:[2,72],33:[2,72],36:[2,72],37:[2,72],39:[2,72],41:[2,72],42:[2,72],46:[2,72],47:[2,72],51:[2,72],57:[2,72],58:[2,72],59:[2,72],60:[2,72],69:[2,72],70:[2,72],71:[2,72],72:[2,72],73:[2,72],74:[2,72],75:[2,72],76:[2,72],77:[2,72],78:[2,72],79:[2,72],80:[2,72],81:[2,72],87:[2,72],89:[2,72],90:[2,72]},{27:122,88:121,91:[1,123],92:[1,49]},{18:124,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:120,27:45,31:35,34:[1,46],44:[1,44],46:[2,85],52:125,61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{25:[1,126]},{18:127,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:128,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:129,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{27:58,31:130,92:[1,49]},{35:131,36:[1,132]},{27:134,45:133,46:[2,30],92:[1,49]},{18:135,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{18:120,27:45,31:35,34:[1,46],44:[1,44],46:[2,85],52:136,61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{20:137,21:[2,15],22:[1,138],23:[1,139]},{5:[2,53],17:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],29:[2,53],30:[2,53],32:[2,53],33:[2,53],36:[2,53],37:[2,53],39:[2,53],41:[2,53],42:[2,53],46:[2,53],47:[2,53],51:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],69:[1,72],70:[1,71],71:[2,53],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75],90:[2,53]},{5:[2,54],17:[2,54],21:[2,54],22:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],29:[2,54],30:[2,54],32:[2,54],33:[2,54],36:[2,54],37:[2,54],39:[2,54],41:[2,54],42:[2,54],46:[2,54],47:[2,54],51:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],69:[1,72],70:[1,71],71:[2,54],72:[2,54],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75],90:[2,54]},{5:[2,55],17:[2,55],21:[2,55],22:[2,55],23:[2,55],24:[2,55],25:[2,55],26:[2,55],29:[2,55],30:[2,55],32:[2,55],33:[2,55],36:[2,55],37:[2,55],39:[2,55],41:[2,55],42:[2,55],46:[2,55],47:[2,55],51:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],69:[1,72],70:[1,71],71:[2,55],72:[2,55],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75],90:[2,55]},{5:[2,56],17:[2,56],21:[2,56],22:[2,56],23:[2,56],24:[2,56],25:[2,56],26:[2,56],29:[2,56],30:[2,56],32:[2,56],33:[2,56],36:[2,56],37:[2,56],39:[2,56],41:[2,56],42:[2,56],46:[2,56],47:[2,56],51:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],69:[1,72],70:[1,71],71:[2,56],72:[2,56],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75],90:[2,56]},{5:[2,57],17:[2,57],21:[2,57],22:[2,57],23:[2,57],24:[2,57],25:[2,57],26:[2,57],29:[2,57],30:[2,57],32:[2,57],33:[2,57],36:[2,57],37:[2,57],39:[2,57],41:[2,57],42:[2,57],46:[2,57],47:[2,57],51:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],69:[1,72],70:[1,71],71:[2,57],72:[2,57],73:[2,57],74:[2,57],79:[1,73],80:[1,74],81:[1,75],90:[2,57]},{5:[2,58],17:[2,58],21:[2,58],22:[2,58],23:[2,58],24:[2,58],25:[2,58],26:[2,58],29:[2,58],30:[2,58],32:[2,58],33:[2,58],36:[2,58],37:[2,58],39:[2,58],41:[2,58],42:[2,58],46:[2,58],47:[2,58],51:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],69:[1,72],70:[1,71],71:[2,58],72:[2,58],73:[2,58],74:[2,58],79:[1,73],80:[1,74],81:[1,75],90:[2,58]},{5:[2,59],17:[2,59],21:[2,59],22:[2,59],23:[2,59],24:[2,59],25:[2,59],26:[2,59],29:[2,59],30:[2,59],32:[2,59],33:[2,59],36:[2,59],37:[2,59],39:[2,59],41:[2,59],42:[2,59],46:[2,59],47:[2,59],51:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],69:[1,72],70:[1,71],71:[2,59],72:[2,59],73:[2,59],74:[2,59],79:[1,73],80:[1,74],81:[1,75],90:[2,59]},{5:[2,60],17:[2,60],21:[2,60],22:[2,60],23:[2,60],24:[2,60],25:[2,60],26:[2,60],29:[2,60],30:[2,60],32:[2,60],33:[2,60],36:[2,60],37:[2,60],39:[2,60],41:[2,60],42:[2,60],46:[2,60],47:[2,60],51:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],69:[1,72],70:[1,71],71:[2,60],72:[2,60],73:[2,60],74:[2,60],79:[1,73],80:[1,74],81:[1,75],90:[2,60]},{5:[2,61],17:[2,61],21:[2,61],22:[2,61],23:[2,61],24:[2,61],25:[2,61],26:[2,61],29:[2,61],30:[2,61],32:[2,61],33:[2,61],36:[2,61],37:[2,61],39:[2,61],41:[2,61],42:[2,61],46:[2,61],47:[2,61],51:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],69:[2,61],70:[2,61],71:[2,61],72:[2,61],73:[2,61],74:[2,61],75:[2,61],76:[2,61],77:[2,61],78:[2,61],79:[1,73],80:[1,74],81:[1,75],90:[2,61]},{5:[2,62],17:[2,62],21:[2,62],22:[2,62],23:[2,62],24:[2,62],25:[2,62],26:[2,62],29:[2,62],30:[2,62],32:[2,62],33:[2,62],36:[2,62],37:[2,62],39:[2,62],41:[2,62],42:[2,62],46:[2,62],47:[2,62],51:[2,62],57:[2,62],58:[2,62],59:[2,62],60:[2,62],69:[2,62],70:[2,62],71:[2,62],72:[2,62],73:[2,62],74:[2,62],75:[2,62],76:[2,62],77:[2,62],78:[2,62],79:[1,73],80:[1,74],81:[1,75],90:[2,62]},{5:[2,63],17:[2,63],21:[2,63],22:[2,63],23:[2,63],24:[2,63],25:[2,63],26:[2,63],29:[2,63],30:[2,63],32:[2,63],33:[2,63],36:[2,63],37:[2,63],39:[2,63],41:[2,63],42:[2,63],46:[2,63],47:[2,63],51:[2,63],57:[2,63],58:[2,63],59:[2,63],60:[2,63],69:[2,63],70:[2,63],71:[2,63],72:[2,63],73:[2,63],74:[2,63],75:[2,63],76:[2,63],77:[2,63],78:[2,63],79:[2,63],80:[2,63],81:[2,63],90:[2,63]},{5:[2,64],17:[2,64],21:[2,64],22:[2,64],23:[2,64],24:[2,64],25:[2,64],26:[2,64],29:[2,64],30:[2,64],32:[2,64],33:[2,64],36:[2,64],37:[2,64],39:[2,64],41:[2,64],42:[2,64],46:[2,64],47:[2,64],51:[2,64],57:[2,64],58:[2,64],59:[2,64],60:[2,64],69:[2,64],70:[2,64],71:[2,64],72:[2,64],73:[2,64],74:[2,64],75:[2,64],76:[2,64],77:[2,64],78:[2,64],79:[2,64],80:[2,64],81:[2,64],90:[2,64]},{5:[2,65],17:[2,65],21:[2,65],22:[2,65],23:[2,65],24:[2,65],25:[2,65],26:[2,65],29:[2,65],30:[2,65],32:[2,65],33:[2,65],36:[2,65],37:[2,65],39:[2,65],41:[2,65],42:[2,65],46:[2,65],47:[2,65],51:[2,65],57:[2,65],58:[2,65],59:[2,65],60:[2,65],69:[2,65],70:[2,65],71:[2,65],72:[2,65],73:[2,65],74:[2,65],75:[2,65],76:[2,65],77:[2,65],78:[2,65],79:[2,65],80:[2,65],81:[2,65],90:[2,65]},{5:[2,66],17:[2,66],21:[2,66],22:[2,66],23:[2,66],24:[2,66],25:[2,66],26:[2,66],29:[2,66],30:[2,66],32:[2,66],33:[2,66],36:[2,66],37:[2,66],39:[2,66],41:[2,66],42:[2,66],46:[2,66],47:[2,66],51:[2,66],57:[2,66],58:[2,66],59:[2,66],60:[2,66],69:[2,66],70:[2,66],71:[2,66],72:[2,66],73:[2,66],74:[2,66],75:[2,66],76:[2,66],77:[2,66],78:[2,66],79:[2,66],80:[2,66],81:[2,66],90:[2,66]},{5:[2,67],17:[2,67],21:[2,67],22:[2,67],23:[2,67],24:[2,67],25:[2,67],26:[2,67],29:[2,67],30:[2,67],32:[2,67],33:[2,67],36:[2,67],37:[2,67],39:[2,67],41:[2,67],42:[2,67],46:[2,67],47:[2,67],51:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],69:[2,67],70:[2,67],71:[2,67],72:[2,67],73:[2,67],74:[2,67],75:[2,67],76:[2,67],77:[2,67],78:[2,67],79:[2,67],80:[2,67],81:[2,67],90:[2,67]},{39:[1,117],46:[2,68],84:140},{39:[2,91],46:[2,91]},{18:141,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{5:[2,73],17:[2,73],21:[2,73],22:[2,73],23:[2,73],24:[2,73],25:[2,73],26:[2,73],28:[2,73],29:[2,73],30:[2,73],32:[2,73],33:[2,73],36:[2,73],37:[2,73],39:[2,73],41:[2,73],42:[2,73],46:[2,73],47:[2,73],51:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],69:[2,73],70:[2,73],71:[2,73],72:[2,73],73:[2,73],74:[2,73],75:[2,73],76:[2,73],77:[2,73],78:[2,73],79:[2,73],80:[2,73],81:[2,73],87:[2,73],89:[2,73],90:[2,73]},{46:[1,142]},{39:[1,145],46:[2,83],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75],94:143,95:144},{5:[2,74],17:[2,74],21:[2,74],22:[2,74],23:[2,74],24:[2,74],25:[2,74],26:[2,74],28:[2,74],29:[2,74],30:[2,74],32:[2,74],33:[2,74],36:[2,74],37:[2,74],39:[2,74],41:[2,74],42:[2,74],46:[2,74],47:[2,74],51:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],69:[2,74],70:[2,74],71:[2,74],72:[2,74],73:[2,74],74:[2,74],75:[2,74],76:[2,74],77:[2,74],78:[2,74],79:[2,74],80:[2,74],81:[2,74],87:[2,74],89:[2,74],90:[2,74]},{5:[2,76],17:[2,76],21:[2,76],22:[2,76],23:[2,76],24:[2,76],25:[2,76],26:[2,76],28:[2,76],29:[2,76],30:[2,76],32:[2,76],33:[2,76],36:[2,76],37:[2,76],39:[2,76],41:[2,76],42:[2,76],46:[2,76],47:[2,76],51:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[2,76],69:[2,76],70:[2,76],71:[2,76],72:[2,76],73:[2,76],74:[2,76],75:[2,76],76:[2,76],77:[2,76],78:[2,76],79:[2,76],80:[2,76],81:[2,76],87:[2,76],89:[2,76],90:[2,76]},{5:[2,77],17:[2,77],21:[2,77],22:[2,77],23:[2,77],24:[2,77],25:[2,77],26:[2,77],28:[2,77],29:[2,77],30:[2,77],32:[2,77],33:[2,77],36:[2,77],37:[2,77],39:[2,77],41:[2,77],42:[2,77],46:[2,77],47:[2,77],51:[2,77],57:[2,77],58:[2,77],59:[2,77],60:[2,77],69:[2,77],70:[2,77],71:[2,77],72:[2,77],73:[2,77],74:[2,77],75:[2,77],76:[2,77],77:[2,77],78:[2,77],79:[2,77],80:[2,77],81:[2,77],87:[2,77],89:[2,77],90:[2,77]},{69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75],90:[1,146]},{46:[1,147]},{5:[2,17],17:[2,17],21:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],29:[2,17],30:[2,17],32:[2,17],33:[2,17],36:[2,17],37:[2,17],41:[2,17],42:[2,17],47:[2,17],51:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17]},{4:148,16:3,17:[2,87],24:[2,87],26:[2,87],29:[2,87],30:[2,87],33:[2,87],37:[2,87],42:[2,87],51:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{39:[1,149],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{39:[2,25],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{4:150,16:3,17:[2,87],24:[2,87],26:[2,87],30:[2,87],32:[2,87],33:[2,87],37:[2,87],42:[2,87],51:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87]},{5:[2,20],17:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],29:[2,20],30:[2,20],32:[2,20],33:[2,20],36:[2,20],37:[2,20],41:[2,20],42:[2,20],47:[2,20],51:[2,20],57:[2,20],58:[2,20],59:[2,20],60:[2,20]},{5:[2,21],17:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],29:[2,21],30:[2,21],32:[2,21],33:[2,21],34:[1,151],36:[2,21],37:[2,21],41:[2,21],42:[2,21],47:[2,21],51:[2,21],57:[2,21],58:[2,21],59:[2,21],60:[2,21]},{46:[1,152]},{39:[1,155],46:[2,28],48:153,49:154},{5:[2,39],17:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],29:[2,39],30:[2,39],32:[2,39],33:[2,39],36:[2,39],37:[2,39],41:[2,39],42:[2,39],47:[2,39],51:[2,39],57:[2,39],58:[2,39],59:[2,39],60:[2,39],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{46:[1,156]},{21:[1,157]},{18:158,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{4:159,16:3,17:[2,87],21:[2,87],24:[2,87],26:[2,87],30:[2,87],33:[2,87],37:[2,87],42:[2,87],51:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87]},{39:[2,92],46:[2,92]},{39:[2,69],46:[2,69],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{5:[2,82],17:[2,82],21:[2,82],22:[2,82],23:[2,82],24:[2,82],25:[2,82],26:[2,82],29:[2,82],30:[2,82],32:[2,82],33:[2,82],36:[2,82],37:[2,82],39:[2,82],41:[2,82],42:[2,82],46:[2,82],47:[2,82],51:[2,82],57:[2,82],58:[2,82],59:[2,82],60:[2,82],69:[2,82],70:[2,82],71:[2,82],72:[2,82],73:[2,82],74:[2,82],75:[2,82],76:[2,82],77:[2,82],78:[2,82],79:[2,82],80:[2,82],81:[2,82],90:[2,82]},{39:[1,145],46:[2,84],95:160},{39:[2,93],46:[2,93]},{18:161,27:45,31:35,34:[1,46],44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{5:[2,75],17:[2,75],21:[2,75],22:[2,75],23:[2,75],24:[2,75],25:[2,75],26:[2,75],28:[2,75],29:[2,75],30:[2,75],32:[2,75],33:[2,75],36:[2,75],37:[2,75],39:[2,75],41:[2,75],42:[2,75],46:[2,75],47:[2,75],51:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],69:[2,75],70:[2,75],71:[2,75],72:[2,75],73:[2,75],74:[2,75],75:[2,75],76:[2,75],77:[2,75],78:[2,75],79:[2,75],80:[2,75],81:[2,75],87:[2,75],89:[2,75],90:[2,75]},{5:[2,81],17:[2,81],21:[2,81],22:[2,81],23:[2,81],24:[2,81],25:[2,81],26:[2,81],29:[2,81],30:[2,81],32:[2,81],33:[2,81],36:[2,81],37:[2,81],39:[2,81],41:[2,81],42:[2,81],46:[2,81],47:[2,81],51:[2,81],57:[2,81],58:[2,81],59:[2,81],60:[2,81],69:[2,81],70:[2,81],71:[2,81],72:[2,81],73:[2,81],74:[2,81],75:[2,81],76:[2,81],77:[2,81],78:[2,81],79:[2,81],80:[2,81],81:[2,81],90:[2,81]},{29:[1,162]},{18:164,27:45,31:35,34:[1,46],40:163,44:[1,44],61:33,62:34,63:36,64:37,65:[1,38],66:[1,39],67:[1,40],68:[1,41],69:[1,42],70:[1,43],91:[1,47],92:[1,49],93:[1,48]},{32:[1,165]},{5:[2,22],17:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],29:[2,22],30:[2,22],32:[2,22],33:[2,22],36:[2,22],37:[2,22],41:[2,22],42:[2,22],47:[2,22],51:[2,22],57:[2,22],58:[2,22],59:[2,22],60:[2,22]},{4:166,16:3,17:[2,87],24:[2,87],26:[2,87],30:[2,87],33:[2,87],37:[2,87],42:[2,87],47:[2,87],51:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87]},{39:[1,155],46:[2,29],49:167},{39:[2,89],46:[2,89]},{27:168,92:[1,49]},{5:[2,32],17:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],29:[2,32],30:[2,32],32:[2,32],33:[2,32],36:[2,32],37:[2,32],41:[2,32],42:[2,32],47:[2,32],51:[2,32],57:[2,32],58:[2,32],59:[2,32],60:[2,32]},{5:[2,12],17:[2,12],21:[2,12],22:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],29:[2,12],30:[2,12],32:[2,12],33:[2,12],36:[2,12],37:[2,12],41:[2,12],42:[2,12],47:[2,12],51:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12]},{4:169,16:3,17:[2,87],21:[2,87],22:[2,87],23:[2,87],24:[2,87],26:[2,87],30:[2,87],33:[2,87],37:[2,87],42:[2,87],51:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{21:[2,16]},{39:[2,94],46:[2,94]},{39:[2,86],46:[2,86],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{5:[2,18],17:[2,18],21:[2,18],22:[2,18],23:[2,18],24:[2,18],25:[2,18],26:[2,18],29:[2,18],30:[2,18],32:[2,18],33:[2,18],36:[2,18],37:[2,18],41:[2,18],42:[2,18],47:[2,18],51:[2,18],57:[2,18],58:[2,18],59:[2,18],60:[2,18]},{4:170,16:3,17:[2,87],24:[2,87],26:[2,87],30:[2,87],33:[2,87],37:[2,87],41:[2,87],42:[2,87],51:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87]},{17:[2,26],24:[2,26],26:[2,26],30:[2,26],33:[2,26],37:[2,26],41:[2,26],42:[2,26],51:[2,26],57:[2,26],58:[2,26],59:[2,26],60:[2,26],69:[1,72],70:[1,71],71:[1,63],72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68],77:[1,69],78:[1,70],79:[1,73],80:[1,74],81:[1,75]},{5:[2,19],17:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],29:[2,19],30:[2,19],32:[2,19],33:[2,19],36:[2,19],37:[2,19],41:[2,19],42:[2,19],47:[2,19],51:[2,19],57:[2,19],58:[2,19],59:[2,19],60:[2,19]},{47:[1,171]},{39:[2,90],46:[2,90]},{39:[2,31],46:[2,31]},{21:[2,13],22:[2,13],23:[2,13]},{41:[1,172]},{5:[2,27],17:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],29:[2,27],30:[2,27],32:[2,27],33:[2,27],36:[2,27],37:[2,27],41:[2,27],42:[2,27],47:[2,27],51:[2,27],57:[2,27],58:[2,27],59:[2,27],60:[2,27]},{5:[2,23],17:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],29:[2,23],30:[2,23],32:[2,23],33:[2,23],36:[2,23],37:[2,23],41:[2,23],42:[2,23],47:[2,23],51:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23]}],
defaultActions: {4:[2,1],159:[2,16]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var ast = require("./ast");

    //helper function
    function print(_){
        //console.log(_);
    }
    function debug(_){
        console.log(_);
    }


//console.log("start compile ...")

/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 */
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

    var r_macroSymbol = /[\w\d\-_\+\/\*%!@\$]/,
        r_ltrim = /^\s+/,
        r_rtrim = /\s+$/;

    function trim(str){
        return (str + "").replace(r_ltrim, "").replace(r_rtrim, "");
    }

    function parseInclude(filename){
        if (exports.OnInclude){
            exports.OnInclude(filename);
        }
    }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    print(yy_.yytext)
    this.begin("ST_CS_START");

break;
case 1:
    //都是注释
    this.popState();

break;
case 2:
    this.unput(yy_.yytext);
    this.popState();
    this.begin("ST_CS");

break;
case 3:
    this.popState();

break;
case 4:
    var index = yy_.yytext.indexOf(":");
    if (index >= 0){
        yy_.yytext = trim(yy_.yytext.substring(0, index));
    }
    if (yy_.yytext == "def" || yy_.yytext == "call"){
        this.begin("ST_CS_MACRO_SYMBOL");
    } else if (yy_.yytext == "/escape"){
        //非常怪，居然有两种写法
        return "T_END_ESCAPE";
    } else if (yy_.yytext == "include"){
        this.begin("ST_CS_INCLUDE");
        return;//include 只影响词法分析
    }

    return "T_" + yy_.yytext.toUpperCase();

break;
case 5:
    //jison不能很好第支持include，这需要修改它
    parseInclude(yy_.yytext.substring(1, yy_.yytext.length - 1));
    this.popState();

break;
case 6:
    yy_.yytext = trim(yy_.yytext);
    this.popState();
    return "T_MACRO_NAME"

break;
case 7:
    print(yy_.yytext);
    return "T_ELSE";

break;
case 8:
    return "T_END_IF";

break;
case 9:
    return "T_END_EACH";

break;
case 10:
    return "T_END_LOOP";

break;
case 11:
    return "T_END_ALT";

break;
case 12:
    return "T_END_WITH";

break;
case 13:
    return "T_END_MACRO_DEF"

break;
case 14:
    return "T_END_ESCAPE";

break;
case 15:
    //支持 string.length这样的function
    return "T_FUN_NAME";

break;
case 16:
    print(yy_.yytext);
    this.begin("ST_END_VARIABEL");
    return "T_VARIABLE";

break;
case 17:
    this.popState();
    if (yy_.yytext == "."){
        this.begin("ST_VARIABLE_PROP");
        print(yy_.yytext);
        return yy_.yytext;
    }
    this.unput(yy_.yytext);

break;
case 18:
    this.popState();//弹掉状态,表示处理完属性
    this.begin("ST_END_VARIABEL");//当前属性是新的variable
    return "T_VARIABLE"

break;
case 19:
    this.popState();//弹掉状态,表示处理完属性
    this.begin("ST_END_VARIABEL");//当前属性是新的variable
    return "NUMBER"

break;
case 20:
    //非label和数字就要返回到正常状态,并退回吃掉的字符
    this.popState();
    this.unput(yy_.yytext);

break;
case 21:
    print(yy_.yytext);
    return "NUMBER";

break;
case 22:
    var quote = yy_.yytext;
    yy_.yytext = "";//扔掉引号
    while(true){
        var ch = this._input[0];
        if (ch == "\\"){
            this.input();//跳过 "\\"，取后面的转义字符
            yy_.yytext += this.input();
        } else if (ch == quote){
            this.input();//字符串结束
            yy_.yytext = yy_.yytext.substring(0, yy_.yytext.length - 1);
            break;
        } else if (ch !== undefined) {
            this.input();
        } else {
            break;
        }
    }
    print(yy_.yytext);
    return "STRING";

break;
case 23:
    print(yy_.yytext);
    return "T_IS_EQUAL";

break;
case 24:
    print(yy_.yytext);
    return "T_IS_NOT_EQUAL";

break;
case 25:
    print(yy_.yytext);
    return "T_IS_GREATER_OR_EQUAL";

break;
case 26:
    print(yy_.yytext);
    return "T_IS_SMALLER_OR_EQUAL";

break;
case 27:
    print(yy_.yytext);
    return "T_BOOLEAN_OR"

break;
case 28:
    print(yy_.yytext);
    return "T_BOOLEAN_AND"

break;
case 29:
    print(yy_.yytext);
    if (yy_.yytext == ']'){
        this.begin("ST_END_BRACKET");
    }
    return yy_.yytext;

break;
case 30:
    //特殊处理 ".", number can property in hdf
    this.popState();
    print(yy_.yytext);
    if (yy_.yytext == "."){
        this.begin("ST_VARIABLE_PROP");
        return yy_.yytext;
    }
    this.unput(yy_.yytext);

break;
case 31:
    //ignore whitespace

break;
case 32:
    return "CONTENT";

break;
case 33:return "EOF";
break;
case 34:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(<\?cs)([ \t]|((\\r|\\n|\\r\\n)))?)/,/^(?:#([^])*?\?>)/,/^(?:[^#])/,/^(?:\s*(\?>)((\\r|\\n|\\r\\n))?)/,/^(?:((var|evar|lvar|set|name|include|if|elif|alt|each|loop|with|def|call|escape|\/escape))\s*:\s*)/,/^(?:(['"]).*\1)/,/^(?:([\w\d\-_\+\/\*%!@\$])+(?:\.([\w\d\-_\+\/\*%!@\$])+)*\s*(?=\())/,/^(?:else)/,/^(?:\/if)/,/^(?:\/each)/,/^(?:\/loop)/,/^(?:\/alt)/,/^(?:\/with)/,/^(?:\/def)/,/^(?:\/escape)/,/^(?:([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)(?:\.([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))+(?=\s*\())/,/^(?:([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))/,/^(?:([^]))/,/^(?:([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))/,/^(?:([0-9]+))/,/^(?:[^0-9a-zA-Z_\x7f-\xff])/,/^(?:(([0-9]*\.[0-9]+)|([0-9]+\.[0-9]*))|([0-9]+))/,/^(?:\B['"])/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:([\#,.\[\]()+-/\*=%!<>?]))/,/^(?:([^]))/,/^(?:([ \n\r\t]+))/,/^(?:(?!(<\?cs))([^])+?(?=(<\?cs)|$))/,/^(?:$)/,/^(?:.)/],
conditions: {"ST_CS_START":{"rules":[1,2],"inclusive":false},"ST_CS":{"rules":[3,4,7,8,9,10,11,12,13,14,15,16,21,22,23,24,25,26,27,28,29,31],"inclusive":false},"ST_END_BRACKET":{"rules":[30],"inclusive":false},"ST_END_VARIABEL":{"rules":[17],"inclusive":false},"ST_VARIABLE_PROP":{"rules":[18,19,20],"inclusive":false},"ST_CS_MACRO_SYMBOL":{"rules":[6],"inclusive":false},"ST_CS_INCLUDE":{"rules":[5],"inclusive":false},"INITIAL":{"rules":[0,32,33,34],"inclusive":true}}
};
//console.log("start lex parse ...")

/**
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 */;
return lexer;
})();
function Lexer(){}
Lexer.prototype = lexer;

function Parser () {
	this.yy = {};
	this.lexer = new Lexer();
}
Parser.prototype = parser;
var clearsilver = new Parser();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = clearsilver;//default parser instance
exports.Parser = Parser;//Parser construct function
exports.parse = function () {
    return clearsilver.parse.apply(clearsilver, arguments); 
};//simple interface for default parser
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}