/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/

var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"cs":3,"inner_statement_list":4,"EOF":5,"statement":6,"block":7,"single_stmt":8,"if":9,"alt":10,"each":11,"loop":12,"with":13,"escape":14,"macro_def":15,"inner_statement_list_repetition0":16,"T_IF":17,"expr":18,"elif_list":19,"else_single":20,"T_END_IF":21,"t_elif_tokens":22,"T_ELIF":23,"T_ELSEIF":24,"T_ELSE":25,"T_ALT":26,"T_END_ALT":27,"T_EACH":28,"t_variable_one":29,"=":30,"T_END_EACH":31,"T_WITH":32,"base_variable":33,"T_END_WITH":34,"T_ESCAPE":35,"STRING":36,"escape_end":37,"T_END_ESCAPE":38,"T_LOOP":39,"loop_init_expr":40,",":41,"loop_step":42,"T_END_LOOP":43,"T_DEF":44,"T_MACRO_NAME":45,"(":46,"def_formal_parameters":47,")":48,"T_END_MACRO_DEF":49,"def_formal_parameters_repetition_plus0":50,"more_parameter":51,"content":52,"set_stmt":53,"var_stmt":54,"name_stmt":55,"macro_call":56,"include_stmt":57,"cs_debugger":58,"CONTENT":59,"T_SET":60,"T_VAR":61,"T_NAME":62,"T_CALL":63,"parameter_list":64,"T_INCLUDE":65,"T_DEBUGGER":66,"variable":67,"expr_basic":68,"#":69,"const_variable":70,"function_call":71,"!":72,"?":73,"$":74,"T_BOOLEAN_OR":75,"T_BOOLEAN_AND":76,"T_IS_EQUAL":77,"T_IS_NOT_EQUAL":78,"<":79,">":80,"T_IS_SMALLER_OR_EQUAL":81,"T_IS_GREATER_OR_EQUAL":82,"+":83,"-":84,"*":85,"/":86,"%":87,"comma_expr":88,"comma_expr_repetition_plus0":89,"comma_expr_more":90,"t_properties":91,"t_property":92,".":93,"t_label":94,"[":95,"]":96,"PROP_NUMBER":97,"T_VARIABLE":98,"t_math_number":99,"NUMBER":100,"NUMBER_HEX":101,"T_FUN_NAME":102,"parameter_list_repetition_plus0":103,"more_parameter_list":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"T_IF",21:"T_END_IF",23:"T_ELIF",24:"T_ELSEIF",25:"T_ELSE",26:"T_ALT",27:"T_END_ALT",28:"T_EACH",30:"=",31:"T_END_EACH",32:"T_WITH",34:"T_END_WITH",35:"T_ESCAPE",36:"STRING",38:"T_END_ESCAPE",39:"T_LOOP",41:",",43:"T_END_LOOP",44:"T_DEF",45:"T_MACRO_NAME",46:"(",48:")",49:"T_END_MACRO_DEF",59:"CONTENT",60:"T_SET",61:"T_VAR",62:"T_NAME",63:"T_CALL",65:"T_INCLUDE",66:"T_DEBUGGER",69:"#",72:"!",73:"?",74:"$",75:"T_BOOLEAN_OR",76:"T_BOOLEAN_AND",77:"T_IS_EQUAL",78:"T_IS_NOT_EQUAL",79:"<",80:">",81:"T_IS_SMALLER_OR_EQUAL",82:"T_IS_GREATER_OR_EQUAL",83:"+",84:"-",85:"*",86:"/",87:"%",93:".",95:"[",96:"]",97:"PROP_NUMBER",98:"T_VARIABLE",100:"NUMBER",101:"NUMBER_HEX",102:"T_FUN_NAME"},
productions_: [0,[3,2],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[4,1],[9,6],[19,4],[19,0],[22,1],[22,1],[20,0],[20,2],[10,4],[11,6],[13,6],[14,4],[37,1],[37,2],[12,7],[40,3],[42,2],[42,0],[15,7],[47,1],[47,2],[47,0],[51,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[52,1],[53,4],[54,2],[55,2],[56,5],[57,1],[58,1],[18,1],[18,1],[67,1],[67,2],[67,1],[67,1],[68,2],[68,2],[68,2],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[88,2],[90,2],[33,1],[33,2],[91,1],[91,2],[92,2],[92,3],[94,1],[94,1],[29,1],[70,1],[70,2],[70,3],[70,2],[70,3],[70,2],[70,1],[99,1],[99,1],[71,4],[71,4],[64,1],[64,2],[64,0],[104,2],[16,0],[16,2],[50,1],[50,2],[89,1],[89,2],[103,1],[103,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
        var program = new ast.AST_Program($$[$0-1]);
        program.pos = pos(_$[$0-1] || {}, yy);
        return program;
      
break;
case 12:
        //console.log('if:' + $$[$0-4].left.target.name);
        //console.log(!1);
        var ifRootAlternate;
        if ($$[$0-2]){
            //else是最后被归约出来的，要放到最末尾的AST_If中
            var elifstmt = $$[$0-2];
            while (elifstmt.alternate){
                elifstmt = elifstmt.alternate;
            };
            elifstmt.alternate = $$[$0-1];

            ifRootAlternate = $$[$0-2]
        } else {
            ifRootAlternate = $$[$0-1]
        }
        this.$ = new ast.AST_If($$[$0-3], $$[$0-4], ifRootAlternate);
        this.$.pos = pos(_$[$0-5], yy);
      
break;
case 13:
        //console.log('elif:' + $$[$0-1].left.target.name);
        //console.log($$[$0-3]);
        var alternate = new ast.AST_If($$[$0], $$[$0-1]);
        alternate.pos = pos(_$[$0-2], yy);
        if ($$[$0-3]){
            //遍历AST_If找到最下面的alternate，把当前归约出的elif放到末尾
            //归约的顺序跟代码书写顺序是一样的
            var curBranch = $$[$0-3];
            while(curBranch.alternate){
                curBranch = curBranch.alternate
            }
            curBranch.alternate = alternate;
            this.$ = $$[$0-3];
        } else {
            this.$ = alternate;
        }
      
break;
case 18:
        this.$ = new ast.AST_Block($$[$0]);
        this.$.pos = pos(_$[$0-1], yy);
    
break;
case 19:
        this.$ = new ast.AST_Alt($$[$0-1], $$[$0-2]);
        this.$.pos = pos(_$[$0-3], yy);
    
break;
case 20:
        this.$ = new ast.AST_Each($$[$0-1], $$[$0-4], $$[$0-2]);
        this.$.pos = pos(_$[$0-5], yy);
    
break;
case 21:
        this.$ = new ast.AST_With($$[$0-1], $$[$0-4], $$[$0-2]);
        this.$.pos = pos(_$[$0-5], yy);
    
break;
case 22:
        //check surpport 'html' and 'js' , 'url'
        this.$ = new ast.AST_Escape($$[$0-1], $$[$0-2]);
        this.$.pos = pos(_$[$0-3], yy);
      
break;
case 25:
        this.$ = new ast.AST_Loop($$[$0-1], $$[$0-5], $$[$0-3], $$[$0-2]);
        this.$.pos = pos(_$[$0-6], yy);
    
break;
case 26:
        $$[$0-2].initValue = $$[$0];
        this.$ = $$[$0-2];
      
break;
case 27:this.$ =$$[$0];
break;
case 28:this.$ =new ast.AST_Number(1) //默认步进为1;
break;
case 29:
        this.$ = new ast.AST_MacroDef($$[$0-1], $$[$0-5], $$[$0-3]);
        this.$.pos = pos(_$[$0-6], yy);
        this.$.pos.last_line = _$[$0].last_line;
        this.$.pos.last_column = _$[$0].last_column;
      
break;
case 30:this.$ =[$$[$0]];
break;
case 31:this.$ =[$$[$0-1]].concat($$[$0]);
break;
case 32:this.$ =[];
break;
case 33:this.$ =$$[$0];
break;
case 41:
        this.$ = new ast.AST_Content($$[$0])
        this.$.pos = pos(_$[$0], yy);
    
break;
case 42:
        this.$ = new ast.AST_SetStmt($$[$0-2], $$[$0])
        this.$.pos = pos(_$[$0-3], yy);
    
break;
case 43:
        this.$ = new ast.AST_VarStmt($$[$0])
        this.$.pos = pos(_$[$0-1], yy);
      
break;
case 44:
        this.$ = new ast.AST_NameStmt($$[$0]);
        this.$.pos = pos(_$[$0-1], yy);
    
break;
case 45:
        this.$ = new ast.AST_MacroCall($$[$0-3], $$[$0-1]);
        this.$.pos = pos(_$[$0-4], yy);
    
break;
case 46:
        if (yy.getSubAst){
            //这个时候子模板的方法分析肯定已经完成了..TODO 递归怎么办?
            var subast = yy.getSubAst($$[$0]);
            this.$ = new ast.AST_Include($$[$0], subast);
        } else {
            this.$ = new ast.AST_Include($$[$0])
        }
        this.$.pos = pos(_$[$0], yy);
    
break;
case 47:
        this.$ = new ast.AST_CSDebugger();
        this.$.pos = pos(_$[$0], yy);
    
break;
case 51:this.$ =new ast.AST_UnaryForceNum($$[$0-1], $$[$0])  /*强制数字表达式*/;
break;
case 54:this.$ =new ast.AST_UnaryNot($$[$0-1], $$[$0])  /*非表达式*/;
break;
case 55:this.$ =new ast.AST_UnaryExist($$[$0-1], $$[$0]) /*是否存在，TODO，不应该有这种语法，应该限定为 ?foo.bar 这种*/;
break;
case 56:this.$ =new ast.AST_Unary($$[$0-1], $$[$0])  /*比如，对于 foo + $$[$01], 其中的3是一个key，而不是数字*/;
break;
case 57:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 58:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 59:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 60:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 61:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 62:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 63:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 64:this.$ = new ast.AST_BinLogicExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 65:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 66:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 67:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 68:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 69:this.$ = new ast.AST_BinMathExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 70:this.$ =new ast.AST_CommaExpr($$[$0-1]) /*逗号表达式*/;
break;
case 71:this.$ =$$[$0-1]  /*控制优先级用（优先被归约）*/;
break;
case 72:this.$ =[$$[$0-1]].concat($$[$0]);
break;
case 73:this.$ =$$[$0];
break;
case 74:this.$ =new ast.AST_VariableAccess($$[$0]) /*注意这里与subProp构成a[b][c][d]的访问形式*/;
break;
case 75:
        var leftTree = $$[$0]
        while(leftTree.left) leftTree = leftTree.left;
        leftTree.left = $$[$0-1];//注意下图中的 "??" 位置
        this.$ = new ast.AST_VariableAccess($$[$0]);

        /*
        debug("---------")
        debug($$[$0-1])
        */
      
break;
case 77:
        $$[$0].left = $$[$0-1]
        this.$ = $$[$0]
        /*debug_prop
        debug("<<reduce<<")
        debug($$[$0-1])
        debug($$[$0])
        */
      
break;
case 78:
        this.$ = new ast.AST_DotProp($$[$0]);
        /*debug_prop
        this.$ = $$[$0]
        */
      
break;
case 79:
        this.$ = new ast.AST_SubProp($$[$0-1]);
        /*debug_prop
        this.$ = $$[$0-1]
        */
    
break;
case 80:this.$ =$$[$0];
break;
case 81:this.$ =new ast.AST_Symbol($$[$0]) /*这个不要综合到t_variable_one里面去*/;
break;
case 82:this.$ =new ast.AST_Symbol($$[$0]);
break;
case 83:this.$ =new ast.AST_String($$[$0])      /*字面字符串*/;
break;
case 84:this.$ =$$[$0]  /*这其实是官方cs引擎的一个bug，它不支持 #"111" */;
break;
case 85:this.$ =new ast.AST_UnaryNegative($$[$0-1], $$[$0]) /*负数表达式*/;
break;
case 86:this.$ =new ast.AST_UnaryNegative($$[$0-1], $$[$0]);
break;
case 87:this.$ =$$[$0];
break;
case 88:this.$ =$$[$0];
break;
case 90:this.$ =new ast.AST_Number($$[$0]);
break;
case 91:this.$ =new ast.AST_HexNumber($$[$0]);
break;
case 92:this.$ = new ast.AST_FunctionCall($$[$0-3], $$[$0-1]);
break;
case 93:this.$ = new ast.AST_FunctionCall($$[$0-3], $$[$0-1]);
break;
case 94:this.$ =[$$[$0]];
break;
case 95:
        this.$ = [$$[$0-1]].concat($$[$0]); /*LR分析归约顺序决定第一个参数最后被规约*/
      
break;
case 96:this.$ =[];
break;
case 97:this.$ =$$[$0];
break;
case 98:this.$ = [];
break;
case 99:$$[$0-1].push($$[$0]);
break;
case 100:this.$ = [$$[$0]];
break;
case 101:$$[$0-1].push($$[$0]);
break;
case 102:this.$ = [$$[$0]];
break;
case 103:$$[$0-1].push($$[$0]);
break;
case 104:this.$ = [$$[$0]];
break;
case 105:$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[2,98],16:3,17:[2,98],26:[2,98],28:[2,98],32:[2,98],35:[2,98],39:[2,98],44:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],65:[2,98],66:[2,98]},{1:[3]},{5:[1,4]},{5:[2,11],6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,17:[1,22],21:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[1,23],27:[2,11],28:[1,24],31:[2,11],32:[1,26],34:[2,11],35:[1,27],38:[2,11],39:[1,25],43:[2,11],44:[1,28],49:[2,11],52:15,53:16,54:17,55:18,56:19,57:20,58:21,59:[1,29],60:[1,30],61:[1,31],62:[1,32],63:[1,33],65:[1,34],66:[1,35]},{1:[2,1]},{5:[2,99],17:[2,99],21:[2,99],23:[2,99],24:[2,99],25:[2,99],26:[2,99],27:[2,99],28:[2,99],31:[2,99],32:[2,99],34:[2,99],35:[2,99],38:[2,99],39:[2,99],43:[2,99],44:[2,99],49:[2,99],59:[2,99],60:[2,99],61:[2,99],62:[2,99],63:[2,99],65:[2,99],66:[2,99]},{5:[2,2],17:[2,2],21:[2,2],23:[2,2],24:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],31:[2,2],32:[2,2],34:[2,2],35:[2,2],38:[2,2],39:[2,2],43:[2,2],44:[2,2],49:[2,2],59:[2,2],60:[2,2],61:[2,2],62:[2,2],63:[2,2],65:[2,2],66:[2,2]},{5:[2,3],17:[2,3],21:[2,3],23:[2,3],24:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],31:[2,3],32:[2,3],34:[2,3],35:[2,3],38:[2,3],39:[2,3],43:[2,3],44:[2,3],49:[2,3],59:[2,3],60:[2,3],61:[2,3],62:[2,3],63:[2,3],65:[2,3],66:[2,3]},{5:[2,4],17:[2,4],21:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],28:[2,4],31:[2,4],32:[2,4],34:[2,4],35:[2,4],38:[2,4],39:[2,4],43:[2,4],44:[2,4],49:[2,4],59:[2,4],60:[2,4],61:[2,4],62:[2,4],63:[2,4],65:[2,4],66:[2,4]},{5:[2,5],17:[2,5],21:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],28:[2,5],31:[2,5],32:[2,5],34:[2,5],35:[2,5],38:[2,5],39:[2,5],43:[2,5],44:[2,5],49:[2,5],59:[2,5],60:[2,5],61:[2,5],62:[2,5],63:[2,5],65:[2,5],66:[2,5]},{5:[2,6],17:[2,6],21:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],31:[2,6],32:[2,6],34:[2,6],35:[2,6],38:[2,6],39:[2,6],43:[2,6],44:[2,6],49:[2,6],59:[2,6],60:[2,6],61:[2,6],62:[2,6],63:[2,6],65:[2,6],66:[2,6]},{5:[2,7],17:[2,7],21:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],28:[2,7],31:[2,7],32:[2,7],34:[2,7],35:[2,7],38:[2,7],39:[2,7],43:[2,7],44:[2,7],49:[2,7],59:[2,7],60:[2,7],61:[2,7],62:[2,7],63:[2,7],65:[2,7],66:[2,7]},{5:[2,8],17:[2,8],21:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],31:[2,8],32:[2,8],34:[2,8],35:[2,8],38:[2,8],39:[2,8],43:[2,8],44:[2,8],49:[2,8],59:[2,8],60:[2,8],61:[2,8],62:[2,8],63:[2,8],65:[2,8],66:[2,8]},{5:[2,9],17:[2,9],21:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],31:[2,9],32:[2,9],34:[2,9],35:[2,9],38:[2,9],39:[2,9],43:[2,9],44:[2,9],49:[2,9],59:[2,9],60:[2,9],61:[2,9],62:[2,9],63:[2,9],65:[2,9],66:[2,9]},{5:[2,10],17:[2,10],21:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],28:[2,10],31:[2,10],32:[2,10],34:[2,10],35:[2,10],38:[2,10],39:[2,10],43:[2,10],44:[2,10],49:[2,10],59:[2,10],60:[2,10],61:[2,10],62:[2,10],63:[2,10],65:[2,10],66:[2,10]},{5:[2,34],17:[2,34],21:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],27:[2,34],28:[2,34],31:[2,34],32:[2,34],34:[2,34],35:[2,34],38:[2,34],39:[2,34],43:[2,34],44:[2,34],49:[2,34],59:[2,34],60:[2,34],61:[2,34],62:[2,34],63:[2,34],65:[2,34],66:[2,34]},{5:[2,35],17:[2,35],21:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],27:[2,35],28:[2,35],31:[2,35],32:[2,35],34:[2,35],35:[2,35],38:[2,35],39:[2,35],43:[2,35],44:[2,35],49:[2,35],59:[2,35],60:[2,35],61:[2,35],62:[2,35],63:[2,35],65:[2,35],66:[2,35]},{5:[2,36],17:[2,36],21:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],27:[2,36],28:[2,36],31:[2,36],32:[2,36],34:[2,36],35:[2,36],38:[2,36],39:[2,36],43:[2,36],44:[2,36],49:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36],63:[2,36],65:[2,36],66:[2,36]},{5:[2,37],17:[2,37],21:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],27:[2,37],28:[2,37],31:[2,37],32:[2,37],34:[2,37],35:[2,37],38:[2,37],39:[2,37],43:[2,37],44:[2,37],49:[2,37],59:[2,37],60:[2,37],61:[2,37],62:[2,37],63:[2,37],65:[2,37],66:[2,37]},{5:[2,38],17:[2,38],21:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],27:[2,38],28:[2,38],31:[2,38],32:[2,38],34:[2,38],35:[2,38],38:[2,38],39:[2,38],43:[2,38],44:[2,38],49:[2,38],59:[2,38],60:[2,38],61:[2,38],62:[2,38],63:[2,38],65:[2,38],66:[2,38]},{5:[2,39],17:[2,39],21:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],27:[2,39],28:[2,39],31:[2,39],32:[2,39],34:[2,39],35:[2,39],38:[2,39],39:[2,39],43:[2,39],44:[2,39],49:[2,39],59:[2,39],60:[2,39],61:[2,39],62:[2,39],63:[2,39],65:[2,39],66:[2,39]},{5:[2,40],17:[2,40],21:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],27:[2,40],28:[2,40],31:[2,40],32:[2,40],34:[2,40],35:[2,40],38:[2,40],39:[2,40],43:[2,40],44:[2,40],49:[2,40],59:[2,40],60:[2,40],61:[2,40],62:[2,40],63:[2,40],65:[2,40],66:[2,40]},{18:36,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:56,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{29:57,98:[1,53]},{29:59,40:58,98:[1,53]},{29:60,98:[1,53]},{36:[1,61]},{45:[1,62]},{5:[2,41],17:[2,41],21:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],27:[2,41],28:[2,41],31:[2,41],32:[2,41],34:[2,41],35:[2,41],38:[2,41],39:[2,41],43:[2,41],44:[2,41],49:[2,41],59:[2,41],60:[2,41],61:[2,41],62:[2,41],63:[2,41],65:[2,41],66:[2,41]},{29:64,33:63,98:[1,53]},{18:65,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{29:64,33:66,98:[1,53]},{45:[1,67]},{5:[2,46],17:[2,46],21:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],31:[2,46],32:[2,46],34:[2,46],35:[2,46],38:[2,46],39:[2,46],43:[2,46],44:[2,46],49:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],65:[2,46],66:[2,46]},{5:[2,47],17:[2,47],21:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],27:[2,47],28:[2,47],31:[2,47],32:[2,47],34:[2,47],35:[2,47],38:[2,47],39:[2,47],43:[2,47],44:[2,47],49:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],65:[2,47],66:[2,47]},{4:68,16:3,17:[2,98],21:[2,98],23:[2,98],24:[2,98],25:[2,98],26:[2,98],28:[2,98],32:[2,98],35:[2,98],39:[2,98],44:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],65:[2,98],66:[2,98],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{5:[2,48],17:[2,48],21:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],28:[2,48],31:[2,48],32:[2,48],34:[2,48],35:[2,48],38:[2,48],39:[2,48],41:[2,48],43:[2,48],44:[2,48],48:[2,48],49:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[2,48],65:[2,48],66:[2,48],75:[2,48],76:[2,48],77:[2,48],78:[2,48],79:[2,48],80:[2,48],81:[2,48],82:[2,48],83:[2,48],84:[2,48],85:[2,48],86:[2,48],87:[2,48],96:[2,48]},{5:[2,49],17:[2,49],21:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],31:[2,49],32:[2,49],34:[2,49],35:[2,49],38:[2,49],39:[2,49],41:[2,49],43:[2,49],44:[2,49],48:[2,49],49:[2,49],59:[2,49],60:[2,49],61:[2,49],62:[2,49],63:[2,49],65:[2,49],66:[2,49],75:[2,49],76:[2,49],77:[2,49],78:[2,49],79:[2,49],80:[2,49],81:[2,49],82:[2,49],83:[2,49],84:[2,49],85:[2,49],86:[2,49],87:[2,49],96:[2,49]},{5:[2,50],17:[2,50],21:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],31:[2,50],32:[2,50],34:[2,50],35:[2,50],38:[2,50],39:[2,50],41:[2,50],43:[2,50],44:[2,50],48:[2,50],49:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],65:[2,50],66:[2,50],75:[2,50],76:[2,50],77:[2,50],78:[2,50],79:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50],86:[2,50],87:[2,50],96:[2,50]},{29:64,33:82,83:[1,85],84:[1,84],98:[1,53],99:83,100:[1,54],101:[1,55]},{5:[2,52],17:[2,52],21:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],31:[2,52],32:[2,52],34:[2,52],35:[2,52],38:[2,52],39:[2,52],41:[2,52],43:[2,52],44:[2,52],48:[2,52],49:[2,52],59:[2,52],60:[2,52],61:[2,52],62:[2,52],63:[2,52],65:[2,52],66:[2,52],75:[2,52],76:[2,52],77:[2,52],78:[2,52],79:[2,52],80:[2,52],81:[2,52],82:[2,52],83:[2,52],84:[2,52],85:[2,52],86:[2,52],87:[2,52],96:[2,52]},{5:[2,53],17:[2,53],21:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],31:[2,53],32:[2,53],34:[2,53],35:[2,53],38:[2,53],39:[2,53],41:[2,53],43:[2,53],44:[2,53],48:[2,53],49:[2,53],59:[2,53],60:[2,53],61:[2,53],62:[2,53],63:[2,53],65:[2,53],66:[2,53],75:[2,53],76:[2,53],77:[2,53],78:[2,53],79:[2,53],80:[2,53],81:[2,53],82:[2,53],83:[2,53],84:[2,53],85:[2,53],86:[2,53],87:[2,53],96:[2,53]},{18:86,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:87,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:88,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:90,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],88:89,98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{5:[2,74],17:[2,74],21:[2,74],23:[2,74],24:[2,74],25:[2,74],26:[2,74],27:[2,74],28:[2,74],31:[2,74],32:[2,74],34:[2,74],35:[2,74],38:[2,74],39:[2,74],41:[2,74],43:[2,74],44:[2,74],46:[1,92],48:[2,74],49:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],65:[2,74],66:[2,74],75:[2,74],76:[2,74],77:[2,74],78:[2,74],79:[2,74],80:[2,74],81:[2,74],82:[2,74],83:[2,74],84:[2,74],85:[2,74],86:[2,74],87:[2,74],91:91,92:93,93:[1,94],95:[1,95],96:[2,74]},{5:[2,83],17:[2,83],21:[2,83],23:[2,83],24:[2,83],25:[2,83],26:[2,83],27:[2,83],28:[2,83],31:[2,83],32:[2,83],34:[2,83],35:[2,83],38:[2,83],39:[2,83],41:[2,83],43:[2,83],44:[2,83],48:[2,83],49:[2,83],59:[2,83],60:[2,83],61:[2,83],62:[2,83],63:[2,83],65:[2,83],66:[2,83],75:[2,83],76:[2,83],77:[2,83],78:[2,83],79:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83],86:[2,83],87:[2,83],96:[2,83]},{99:96,100:[1,54],101:[1,55]},{99:97,100:[1,54],101:[1,55]},{5:[2,89],17:[2,89],21:[2,89],23:[2,89],24:[2,89],25:[2,89],26:[2,89],27:[2,89],28:[2,89],31:[2,89],32:[2,89],34:[2,89],35:[2,89],38:[2,89],39:[2,89],41:[2,89],43:[2,89],44:[2,89],48:[2,89],49:[2,89],59:[2,89],60:[2,89],61:[2,89],62:[2,89],63:[2,89],65:[2,89],66:[2,89],75:[2,89],76:[2,89],77:[2,89],78:[2,89],79:[2,89],80:[2,89],81:[2,89],82:[2,89],83:[2,89],84:[2,89],85:[2,89],86:[2,89],87:[2,89],96:[2,89]},{46:[1,98]},{5:[2,82],17:[2,82],21:[2,82],23:[2,82],24:[2,82],25:[2,82],26:[2,82],27:[2,82],28:[2,82],30:[2,82],31:[2,82],32:[2,82],34:[2,82],35:[2,82],38:[2,82],39:[2,82],41:[2,82],43:[2,82],44:[2,82],46:[2,82],48:[2,82],49:[2,82],59:[2,82],60:[2,82],61:[2,82],62:[2,82],63:[2,82],65:[2,82],66:[2,82],75:[2,82],76:[2,82],77:[2,82],78:[2,82],79:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82],86:[2,82],87:[2,82],93:[2,82],95:[2,82],96:[2,82]},{5:[2,90],17:[2,90],21:[2,90],23:[2,90],24:[2,90],25:[2,90],26:[2,90],27:[2,90],28:[2,90],31:[2,90],32:[2,90],34:[2,90],35:[2,90],38:[2,90],39:[2,90],41:[2,90],43:[2,90],44:[2,90],48:[2,90],49:[2,90],59:[2,90],60:[2,90],61:[2,90],62:[2,90],63:[2,90],65:[2,90],66:[2,90],75:[2,90],76:[2,90],77:[2,90],78:[2,90],79:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90],86:[2,90],87:[2,90],96:[2,90]},{5:[2,91],17:[2,91],21:[2,91],23:[2,91],24:[2,91],25:[2,91],26:[2,91],27:[2,91],28:[2,91],31:[2,91],32:[2,91],34:[2,91],35:[2,91],38:[2,91],39:[2,91],41:[2,91],43:[2,91],44:[2,91],48:[2,91],49:[2,91],59:[2,91],60:[2,91],61:[2,91],62:[2,91],63:[2,91],65:[2,91],66:[2,91],75:[2,91],76:[2,91],77:[2,91],78:[2,91],79:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91],86:[2,91],87:[2,91],96:[2,91]},{4:99,16:3,17:[2,98],26:[2,98],27:[2,98],28:[2,98],32:[2,98],35:[2,98],39:[2,98],44:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],65:[2,98],66:[2,98],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{30:[1,100]},{41:[1,101]},{30:[1,102]},{30:[1,103]},{4:104,16:3,17:[2,98],26:[2,98],28:[2,98],32:[2,98],35:[2,98],38:[2,98],39:[2,98],44:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],65:[2,98],66:[2,98]},{46:[1,105]},{30:[1,106]},{5:[2,74],17:[2,74],21:[2,74],23:[2,74],24:[2,74],25:[2,74],26:[2,74],27:[2,74],28:[2,74],30:[2,74],31:[2,74],32:[2,74],34:[2,74],35:[2,74],38:[2,74],39:[2,74],41:[2,74],43:[2,74],44:[2,74],48:[2,74],49:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],65:[2,74],66:[2,74],75:[2,74],76:[2,74],77:[2,74],78:[2,74],79:[2,74],80:[2,74],81:[2,74],82:[2,74],83:[2,74],84:[2,74],85:[2,74],86:[2,74],87:[2,74],91:91,92:93,93:[1,94],95:[1,95],96:[2,74]},{5:[2,43],17:[2,43],21:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],27:[2,43],28:[2,43],31:[2,43],32:[2,43],34:[2,43],35:[2,43],38:[2,43],39:[2,43],43:[2,43],44:[2,43],49:[2,43],59:[2,43],60:[2,43],61:[2,43],62:[2,43],63:[2,43],65:[2,43],66:[2,43],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{5:[2,44],17:[2,44],21:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],27:[2,44],28:[2,44],31:[2,44],32:[2,44],34:[2,44],35:[2,44],38:[2,44],39:[2,44],43:[2,44],44:[2,44],49:[2,44],59:[2,44],60:[2,44],61:[2,44],62:[2,44],63:[2,44],65:[2,44],66:[2,44]},{46:[1,107]},{19:108,21:[2,14],23:[2,14],24:[2,14],25:[2,14]},{18:109,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:110,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:111,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:112,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:113,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:114,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:115,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:116,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:117,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:118,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:119,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:120,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:121,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{5:[2,51],17:[2,51],21:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],31:[2,51],32:[2,51],34:[2,51],35:[2,51],38:[2,51],39:[2,51],41:[2,51],43:[2,51],44:[2,51],48:[2,51],49:[2,51],59:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],65:[2,51],66:[2,51],75:[2,51],76:[2,51],77:[2,51],78:[2,51],79:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51],86:[2,51],87:[2,51],96:[2,51]},{5:[2,84],17:[2,84],21:[2,84],23:[2,84],24:[2,84],25:[2,84],26:[2,84],27:[2,84],28:[2,84],31:[2,84],32:[2,84],34:[2,84],35:[2,84],38:[2,84],39:[2,84],41:[2,84],43:[2,84],44:[2,84],48:[2,84],49:[2,84],59:[2,84],60:[2,84],61:[2,84],62:[2,84],63:[2,84],65:[2,84],66:[2,84],75:[2,84],76:[2,84],77:[2,84],78:[2,84],79:[2,84],80:[2,84],81:[2,84],82:[2,84],83:[2,84],84:[2,84],85:[2,84],86:[2,84],87:[2,84],96:[2,84]},{99:122,100:[1,54],101:[1,55]},{99:123,100:[1,54],101:[1,55]},{5:[2,54],17:[2,54],21:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],27:[2,54],28:[2,54],31:[2,54],32:[2,54],34:[2,54],35:[2,54],38:[2,54],39:[2,54],41:[2,54],43:[2,54],44:[2,54],48:[2,54],49:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54],65:[2,54],66:[2,54],75:[2,54],76:[2,54],77:[2,54],78:[2,54],79:[2,54],80:[2,54],81:[2,54],82:[2,54],83:[2,54],84:[2,54],85:[2,54],86:[2,54],87:[2,54],96:[2,54]},{5:[2,55],17:[2,55],21:[2,55],23:[2,55],24:[2,55],25:[2,55],26:[2,55],27:[2,55],28:[2,55],31:[2,55],32:[2,55],34:[2,55],35:[2,55],38:[2,55],39:[2,55],41:[2,55],43:[2,55],44:[2,55],48:[2,55],49:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55],65:[2,55],66:[2,55],75:[2,55],76:[2,55],77:[2,55],78:[2,55],79:[2,55],80:[2,55],81:[2,55],82:[2,55],83:[2,55],84:[2,55],85:[2,55],86:[2,55],87:[2,55],96:[2,55]},{5:[2,56],17:[2,56],21:[2,56],23:[2,56],24:[2,56],25:[2,56],26:[2,56],27:[2,56],28:[2,56],31:[2,56],32:[2,56],34:[2,56],35:[2,56],38:[2,56],39:[2,56],41:[2,56],43:[2,56],44:[2,56],48:[2,56],49:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],65:[2,56],66:[2,56],75:[2,56],76:[2,56],77:[2,56],78:[2,56],79:[2,56],80:[2,56],81:[2,56],82:[2,56],83:[2,56],84:[2,56],85:[2,56],86:[2,56],87:[2,56],96:[2,56]},{48:[1,124]},{41:[1,128],48:[1,125],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],89:126,90:127},{5:[2,75],17:[2,75],21:[2,75],23:[2,75],24:[2,75],25:[2,75],26:[2,75],27:[2,75],28:[2,75],30:[2,75],31:[2,75],32:[2,75],34:[2,75],35:[2,75],38:[2,75],39:[2,75],41:[2,75],43:[2,75],44:[2,75],48:[2,75],49:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],63:[2,75],65:[2,75],66:[2,75],75:[2,75],76:[2,75],77:[2,75],78:[2,75],79:[2,75],80:[2,75],81:[2,75],82:[2,75],83:[2,75],84:[2,75],85:[2,75],86:[2,75],87:[2,75],92:129,93:[1,94],95:[1,95],96:[2,75]},{18:131,29:47,33:39,36:[1,48],46:[1,46],48:[2,96],64:130,67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{5:[2,76],17:[2,76],21:[2,76],23:[2,76],24:[2,76],25:[2,76],26:[2,76],27:[2,76],28:[2,76],30:[2,76],31:[2,76],32:[2,76],34:[2,76],35:[2,76],38:[2,76],39:[2,76],41:[2,76],43:[2,76],44:[2,76],48:[2,76],49:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],65:[2,76],66:[2,76],75:[2,76],76:[2,76],77:[2,76],78:[2,76],79:[2,76],80:[2,76],81:[2,76],82:[2,76],83:[2,76],84:[2,76],85:[2,76],86:[2,76],87:[2,76],93:[2,76],95:[2,76],96:[2,76]},{29:133,94:132,97:[1,134],98:[1,53]},{18:135,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{5:[2,86],17:[2,86],21:[2,86],23:[2,86],24:[2,86],25:[2,86],26:[2,86],27:[2,86],28:[2,86],31:[2,86],32:[2,86],34:[2,86],35:[2,86],38:[2,86],39:[2,86],41:[2,86],43:[2,86],44:[2,86],48:[2,86],49:[2,86],59:[2,86],60:[2,86],61:[2,86],62:[2,86],63:[2,86],65:[2,86],66:[2,86],75:[2,86],76:[2,86],77:[2,86],78:[2,86],79:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86],86:[2,86],87:[2,86],96:[2,86]},{5:[2,88],17:[2,88],21:[2,88],23:[2,88],24:[2,88],25:[2,88],26:[2,88],27:[2,88],28:[2,88],31:[2,88],32:[2,88],34:[2,88],35:[2,88],38:[2,88],39:[2,88],41:[2,88],43:[2,88],44:[2,88],48:[2,88],49:[2,88],59:[2,88],60:[2,88],61:[2,88],62:[2,88],63:[2,88],65:[2,88],66:[2,88],75:[2,88],76:[2,88],77:[2,88],78:[2,88],79:[2,88],80:[2,88],81:[2,88],82:[2,88],83:[2,88],84:[2,88],85:[2,88],86:[2,88],87:[2,88],96:[2,88]},{18:131,29:47,33:39,36:[1,48],46:[1,46],48:[2,96],64:136,67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{27:[1,137]},{18:138,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:139,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:140,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{29:64,33:141,98:[1,53]},{37:142,38:[1,143]},{29:145,47:144,48:[2,32],98:[1,53]},{18:146,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{18:131,29:47,33:39,36:[1,48],46:[1,46],48:[2,96],64:147,67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{20:148,21:[2,17],22:149,23:[1,151],24:[1,152],25:[1,150]},{5:[2,57],17:[2,57],21:[2,57],23:[2,57],24:[2,57],25:[2,57],26:[2,57],27:[2,57],28:[2,57],31:[2,57],32:[2,57],34:[2,57],35:[2,57],38:[2,57],39:[2,57],41:[2,57],43:[2,57],44:[2,57],48:[2,57],49:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57],65:[2,57],66:[2,57],75:[2,57],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],96:[2,57]},{5:[2,58],17:[2,58],21:[2,58],23:[2,58],24:[2,58],25:[2,58],26:[2,58],27:[2,58],28:[2,58],31:[2,58],32:[2,58],34:[2,58],35:[2,58],38:[2,58],39:[2,58],41:[2,58],43:[2,58],44:[2,58],48:[2,58],49:[2,58],59:[2,58],60:[2,58],61:[2,58],62:[2,58],63:[2,58],65:[2,58],66:[2,58],75:[2,58],76:[2,58],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],96:[2,58]},{5:[2,59],17:[2,59],21:[2,59],23:[2,59],24:[2,59],25:[2,59],26:[2,59],27:[2,59],28:[2,59],31:[2,59],32:[2,59],34:[2,59],35:[2,59],38:[2,59],39:[2,59],41:[2,59],43:[2,59],44:[2,59],48:[2,59],49:[2,59],59:[2,59],60:[2,59],61:[2,59],62:[2,59],63:[2,59],65:[2,59],66:[2,59],75:[2,59],76:[2,59],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],96:[2,59]},{5:[2,60],17:[2,60],21:[2,60],23:[2,60],24:[2,60],25:[2,60],26:[2,60],27:[2,60],28:[2,60],31:[2,60],32:[2,60],34:[2,60],35:[2,60],38:[2,60],39:[2,60],41:[2,60],43:[2,60],44:[2,60],48:[2,60],49:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60],65:[2,60],66:[2,60],75:[2,60],76:[2,60],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],96:[2,60]},{5:[2,61],17:[2,61],21:[2,61],23:[2,61],24:[2,61],25:[2,61],26:[2,61],27:[2,61],28:[2,61],31:[2,61],32:[2,61],34:[2,61],35:[2,61],38:[2,61],39:[2,61],41:[2,61],43:[2,61],44:[2,61],48:[2,61],49:[2,61],59:[2,61],60:[2,61],61:[2,61],62:[2,61],63:[2,61],65:[2,61],66:[2,61],75:[2,61],76:[2,61],77:[2,61],78:[2,61],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],96:[2,61]},{5:[2,62],17:[2,62],21:[2,62],23:[2,62],24:[2,62],25:[2,62],26:[2,62],27:[2,62],28:[2,62],31:[2,62],32:[2,62],34:[2,62],35:[2,62],38:[2,62],39:[2,62],41:[2,62],43:[2,62],44:[2,62],48:[2,62],49:[2,62],59:[2,62],60:[2,62],61:[2,62],62:[2,62],63:[2,62],65:[2,62],66:[2,62],75:[2,62],76:[2,62],77:[2,62],78:[2,62],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],96:[2,62]},{5:[2,63],17:[2,63],21:[2,63],23:[2,63],24:[2,63],25:[2,63],26:[2,63],27:[2,63],28:[2,63],31:[2,63],32:[2,63],34:[2,63],35:[2,63],38:[2,63],39:[2,63],41:[2,63],43:[2,63],44:[2,63],48:[2,63],49:[2,63],59:[2,63],60:[2,63],61:[2,63],62:[2,63],63:[2,63],65:[2,63],66:[2,63],75:[2,63],76:[2,63],77:[2,63],78:[2,63],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],96:[2,63]},{5:[2,64],17:[2,64],21:[2,64],23:[2,64],24:[2,64],25:[2,64],26:[2,64],27:[2,64],28:[2,64],31:[2,64],32:[2,64],34:[2,64],35:[2,64],38:[2,64],39:[2,64],41:[2,64],43:[2,64],44:[2,64],48:[2,64],49:[2,64],59:[2,64],60:[2,64],61:[2,64],62:[2,64],63:[2,64],65:[2,64],66:[2,64],75:[2,64],76:[2,64],77:[2,64],78:[2,64],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],96:[2,64]},{5:[2,65],17:[2,65],21:[2,65],23:[2,65],24:[2,65],25:[2,65],26:[2,65],27:[2,65],28:[2,65],31:[2,65],32:[2,65],34:[2,65],35:[2,65],38:[2,65],39:[2,65],41:[2,65],43:[2,65],44:[2,65],48:[2,65],49:[2,65],59:[2,65],60:[2,65],61:[2,65],62:[2,65],63:[2,65],65:[2,65],66:[2,65],75:[2,65],76:[2,65],77:[2,65],78:[2,65],79:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[1,79],86:[1,80],87:[1,81],96:[2,65]},{5:[2,66],17:[2,66],21:[2,66],23:[2,66],24:[2,66],25:[2,66],26:[2,66],27:[2,66],28:[2,66],31:[2,66],32:[2,66],34:[2,66],35:[2,66],38:[2,66],39:[2,66],41:[2,66],43:[2,66],44:[2,66],48:[2,66],49:[2,66],59:[2,66],60:[2,66],61:[2,66],62:[2,66],63:[2,66],65:[2,66],66:[2,66],75:[2,66],76:[2,66],77:[2,66],78:[2,66],79:[2,66],80:[2,66],81:[2,66],82:[2,66],83:[2,66],84:[2,66],85:[1,79],86:[1,80],87:[1,81],96:[2,66]},{5:[2,67],17:[2,67],21:[2,67],23:[2,67],24:[2,67],25:[2,67],26:[2,67],27:[2,67],28:[2,67],31:[2,67],32:[2,67],34:[2,67],35:[2,67],38:[2,67],39:[2,67],41:[2,67],43:[2,67],44:[2,67],48:[2,67],49:[2,67],59:[2,67],60:[2,67],61:[2,67],62:[2,67],63:[2,67],65:[2,67],66:[2,67],75:[2,67],76:[2,67],77:[2,67],78:[2,67],79:[2,67],80:[2,67],81:[2,67],82:[2,67],83:[2,67],84:[2,67],85:[2,67],86:[2,67],87:[2,67],96:[2,67]},{5:[2,68],17:[2,68],21:[2,68],23:[2,68],24:[2,68],25:[2,68],26:[2,68],27:[2,68],28:[2,68],31:[2,68],32:[2,68],34:[2,68],35:[2,68],38:[2,68],39:[2,68],41:[2,68],43:[2,68],44:[2,68],48:[2,68],49:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],63:[2,68],65:[2,68],66:[2,68],75:[2,68],76:[2,68],77:[2,68],78:[2,68],79:[2,68],80:[2,68],81:[2,68],82:[2,68],83:[2,68],84:[2,68],85:[2,68],86:[2,68],87:[2,68],96:[2,68]},{5:[2,69],17:[2,69],21:[2,69],23:[2,69],24:[2,69],25:[2,69],26:[2,69],27:[2,69],28:[2,69],31:[2,69],32:[2,69],34:[2,69],35:[2,69],38:[2,69],39:[2,69],41:[2,69],43:[2,69],44:[2,69],48:[2,69],49:[2,69],59:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69],65:[2,69],66:[2,69],75:[2,69],76:[2,69],77:[2,69],78:[2,69],79:[2,69],80:[2,69],81:[2,69],82:[2,69],83:[2,69],84:[2,69],85:[2,69],86:[2,69],87:[2,69],96:[2,69]},{5:[2,85],17:[2,85],21:[2,85],23:[2,85],24:[2,85],25:[2,85],26:[2,85],27:[2,85],28:[2,85],31:[2,85],32:[2,85],34:[2,85],35:[2,85],38:[2,85],39:[2,85],41:[2,85],43:[2,85],44:[2,85],48:[2,85],49:[2,85],59:[2,85],60:[2,85],61:[2,85],62:[2,85],63:[2,85],65:[2,85],66:[2,85],75:[2,85],76:[2,85],77:[2,85],78:[2,85],79:[2,85],80:[2,85],81:[2,85],82:[2,85],83:[2,85],84:[2,85],85:[2,85],86:[2,85],87:[2,85],96:[2,85]},{5:[2,87],17:[2,87],21:[2,87],23:[2,87],24:[2,87],25:[2,87],26:[2,87],27:[2,87],28:[2,87],31:[2,87],32:[2,87],34:[2,87],35:[2,87],38:[2,87],39:[2,87],41:[2,87],43:[2,87],44:[2,87],48:[2,87],49:[2,87],59:[2,87],60:[2,87],61:[2,87],62:[2,87],63:[2,87],65:[2,87],66:[2,87],75:[2,87],76:[2,87],77:[2,87],78:[2,87],79:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87],86:[2,87],87:[2,87],96:[2,87]},{5:[2,70],17:[2,70],21:[2,70],23:[2,70],24:[2,70],25:[2,70],26:[2,70],27:[2,70],28:[2,70],31:[2,70],32:[2,70],34:[2,70],35:[2,70],38:[2,70],39:[2,70],41:[2,70],43:[2,70],44:[2,70],48:[2,70],49:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],65:[2,70],66:[2,70],75:[2,70],76:[2,70],77:[2,70],78:[2,70],79:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70],86:[2,70],87:[2,70],96:[2,70]},{5:[2,71],17:[2,71],21:[2,71],23:[2,71],24:[2,71],25:[2,71],26:[2,71],27:[2,71],28:[2,71],31:[2,71],32:[2,71],34:[2,71],35:[2,71],38:[2,71],39:[2,71],41:[2,71],43:[2,71],44:[2,71],48:[2,71],49:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],65:[2,71],66:[2,71],75:[2,71],76:[2,71],77:[2,71],78:[2,71],79:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71],86:[2,71],87:[2,71],96:[2,71]},{41:[1,128],48:[2,72],90:153},{41:[2,102],48:[2,102]},{18:154,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{5:[2,77],17:[2,77],21:[2,77],23:[2,77],24:[2,77],25:[2,77],26:[2,77],27:[2,77],28:[2,77],30:[2,77],31:[2,77],32:[2,77],34:[2,77],35:[2,77],38:[2,77],39:[2,77],41:[2,77],43:[2,77],44:[2,77],48:[2,77],49:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],65:[2,77],66:[2,77],75:[2,77],76:[2,77],77:[2,77],78:[2,77],79:[2,77],80:[2,77],81:[2,77],82:[2,77],83:[2,77],84:[2,77],85:[2,77],86:[2,77],87:[2,77],93:[2,77],95:[2,77],96:[2,77]},{48:[1,155]},{41:[1,158],48:[2,94],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],103:156,104:157},{5:[2,78],17:[2,78],21:[2,78],23:[2,78],24:[2,78],25:[2,78],26:[2,78],27:[2,78],28:[2,78],30:[2,78],31:[2,78],32:[2,78],34:[2,78],35:[2,78],38:[2,78],39:[2,78],41:[2,78],43:[2,78],44:[2,78],48:[2,78],49:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],65:[2,78],66:[2,78],75:[2,78],76:[2,78],77:[2,78],78:[2,78],79:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78],86:[2,78],87:[2,78],93:[2,78],95:[2,78],96:[2,78]},{5:[2,80],17:[2,80],21:[2,80],23:[2,80],24:[2,80],25:[2,80],26:[2,80],27:[2,80],28:[2,80],30:[2,80],31:[2,80],32:[2,80],34:[2,80],35:[2,80],38:[2,80],39:[2,80],41:[2,80],43:[2,80],44:[2,80],48:[2,80],49:[2,80],59:[2,80],60:[2,80],61:[2,80],62:[2,80],63:[2,80],65:[2,80],66:[2,80],75:[2,80],76:[2,80],77:[2,80],78:[2,80],79:[2,80],80:[2,80],81:[2,80],82:[2,80],83:[2,80],84:[2,80],85:[2,80],86:[2,80],87:[2,80],93:[2,80],95:[2,80],96:[2,80]},{5:[2,81],17:[2,81],21:[2,81],23:[2,81],24:[2,81],25:[2,81],26:[2,81],27:[2,81],28:[2,81],30:[2,81],31:[2,81],32:[2,81],34:[2,81],35:[2,81],38:[2,81],39:[2,81],41:[2,81],43:[2,81],44:[2,81],48:[2,81],49:[2,81],59:[2,81],60:[2,81],61:[2,81],62:[2,81],63:[2,81],65:[2,81],66:[2,81],75:[2,81],76:[2,81],77:[2,81],78:[2,81],79:[2,81],80:[2,81],81:[2,81],82:[2,81],83:[2,81],84:[2,81],85:[2,81],86:[2,81],87:[2,81],93:[2,81],95:[2,81],96:[2,81]},{75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81],96:[1,159]},{48:[1,160]},{5:[2,19],17:[2,19],21:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],31:[2,19],32:[2,19],34:[2,19],35:[2,19],38:[2,19],39:[2,19],43:[2,19],44:[2,19],49:[2,19],59:[2,19],60:[2,19],61:[2,19],62:[2,19],63:[2,19],65:[2,19],66:[2,19]},{4:161,16:3,17:[2,98],26:[2,98],28:[2,98],31:[2,98],32:[2,98],35:[2,98],39:[2,98],44:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],65:[2,98],66:[2,98],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{17:[2,28],26:[2,28],28:[2,28],32:[2,28],35:[2,28],39:[2,28],41:[1,163],42:162,43:[2,28],44:[2,28],59:[2,28],60:[2,28],61:[2,28],62:[2,28],63:[2,28],65:[2,28],66:[2,28],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{41:[2,26],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{4:164,16:3,17:[2,98],26:[2,98],28:[2,98],32:[2,98],34:[2,98],35:[2,98],39:[2,98],44:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],65:[2,98],66:[2,98]},{5:[2,22],17:[2,22],21:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],31:[2,22],32:[2,22],34:[2,22],35:[2,22],38:[2,22],39:[2,22],43:[2,22],44:[2,22],49:[2,22],59:[2,22],60:[2,22],61:[2,22],62:[2,22],63:[2,22],65:[2,22],66:[2,22]},{5:[2,23],17:[2,23],21:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],31:[2,23],32:[2,23],34:[2,23],35:[2,23],36:[1,165],38:[2,23],39:[2,23],43:[2,23],44:[2,23],49:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23],63:[2,23],65:[2,23],66:[2,23]},{48:[1,166]},{41:[1,169],48:[2,30],50:167,51:168},{5:[2,42],17:[2,42],21:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],31:[2,42],32:[2,42],34:[2,42],35:[2,42],38:[2,42],39:[2,42],43:[2,42],44:[2,42],49:[2,42],59:[2,42],60:[2,42],61:[2,42],62:[2,42],63:[2,42],65:[2,42],66:[2,42],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{48:[1,170]},{21:[1,171]},{18:172,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{4:173,16:3,17:[2,98],21:[2,98],26:[2,98],28:[2,98],32:[2,98],35:[2,98],39:[2,98],44:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],65:[2,98],66:[2,98]},{36:[2,15],46:[2,15],69:[2,15],72:[2,15],73:[2,15],74:[2,15],83:[2,15],84:[2,15],98:[2,15],100:[2,15],101:[2,15],102:[2,15]},{36:[2,16],46:[2,16],69:[2,16],72:[2,16],73:[2,16],74:[2,16],83:[2,16],84:[2,16],98:[2,16],100:[2,16],101:[2,16],102:[2,16]},{41:[2,103],48:[2,103]},{41:[2,73],48:[2,73],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{5:[2,93],17:[2,93],21:[2,93],23:[2,93],24:[2,93],25:[2,93],26:[2,93],27:[2,93],28:[2,93],31:[2,93],32:[2,93],34:[2,93],35:[2,93],38:[2,93],39:[2,93],41:[2,93],43:[2,93],44:[2,93],48:[2,93],49:[2,93],59:[2,93],60:[2,93],61:[2,93],62:[2,93],63:[2,93],65:[2,93],66:[2,93],75:[2,93],76:[2,93],77:[2,93],78:[2,93],79:[2,93],80:[2,93],81:[2,93],82:[2,93],83:[2,93],84:[2,93],85:[2,93],86:[2,93],87:[2,93],96:[2,93]},{41:[1,158],48:[2,95],104:174},{41:[2,104],48:[2,104]},{18:175,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{5:[2,79],17:[2,79],21:[2,79],23:[2,79],24:[2,79],25:[2,79],26:[2,79],27:[2,79],28:[2,79],30:[2,79],31:[2,79],32:[2,79],34:[2,79],35:[2,79],38:[2,79],39:[2,79],41:[2,79],43:[2,79],44:[2,79],48:[2,79],49:[2,79],59:[2,79],60:[2,79],61:[2,79],62:[2,79],63:[2,79],65:[2,79],66:[2,79],75:[2,79],76:[2,79],77:[2,79],78:[2,79],79:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79],86:[2,79],87:[2,79],93:[2,79],95:[2,79],96:[2,79]},{5:[2,92],17:[2,92],21:[2,92],23:[2,92],24:[2,92],25:[2,92],26:[2,92],27:[2,92],28:[2,92],31:[2,92],32:[2,92],34:[2,92],35:[2,92],38:[2,92],39:[2,92],41:[2,92],43:[2,92],44:[2,92],48:[2,92],49:[2,92],59:[2,92],60:[2,92],61:[2,92],62:[2,92],63:[2,92],65:[2,92],66:[2,92],75:[2,92],76:[2,92],77:[2,92],78:[2,92],79:[2,92],80:[2,92],81:[2,92],82:[2,92],83:[2,92],84:[2,92],85:[2,92],86:[2,92],87:[2,92],96:[2,92]},{31:[1,176]},{4:177,16:3,17:[2,98],26:[2,98],28:[2,98],32:[2,98],35:[2,98],39:[2,98],43:[2,98],44:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],65:[2,98],66:[2,98]},{18:178,29:47,33:39,36:[1,48],46:[1,46],67:37,68:38,69:[1,40],70:41,71:42,72:[1,43],73:[1,44],74:[1,45],83:[1,50],84:[1,49],98:[1,53],99:51,100:[1,54],101:[1,55],102:[1,52]},{34:[1,179]},{5:[2,24],17:[2,24],21:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],31:[2,24],32:[2,24],34:[2,24],35:[2,24],38:[2,24],39:[2,24],43:[2,24],44:[2,24],49:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],63:[2,24],65:[2,24],66:[2,24]},{4:180,16:3,17:[2,98],26:[2,98],28:[2,98],32:[2,98],35:[2,98],39:[2,98],44:[2,98],49:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],65:[2,98],66:[2,98]},{41:[1,169],48:[2,31],51:181},{41:[2,100],48:[2,100]},{29:182,98:[1,53]},{5:[2,45],17:[2,45],21:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],27:[2,45],28:[2,45],31:[2,45],32:[2,45],34:[2,45],35:[2,45],38:[2,45],39:[2,45],43:[2,45],44:[2,45],49:[2,45],59:[2,45],60:[2,45],61:[2,45],62:[2,45],63:[2,45],65:[2,45],66:[2,45]},{5:[2,12],17:[2,12],21:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],31:[2,12],32:[2,12],34:[2,12],35:[2,12],38:[2,12],39:[2,12],43:[2,12],44:[2,12],49:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12],63:[2,12],65:[2,12],66:[2,12]},{4:183,16:3,17:[2,98],21:[2,98],23:[2,98],24:[2,98],25:[2,98],26:[2,98],28:[2,98],32:[2,98],35:[2,98],39:[2,98],44:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],65:[2,98],66:[2,98],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{21:[2,18]},{41:[2,105],48:[2,105]},{41:[2,97],48:[2,97],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{5:[2,20],17:[2,20],21:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],27:[2,20],28:[2,20],31:[2,20],32:[2,20],34:[2,20],35:[2,20],38:[2,20],39:[2,20],43:[2,20],44:[2,20],49:[2,20],59:[2,20],60:[2,20],61:[2,20],62:[2,20],63:[2,20],65:[2,20],66:[2,20]},{43:[1,184]},{17:[2,27],26:[2,27],28:[2,27],32:[2,27],35:[2,27],39:[2,27],43:[2,27],44:[2,27],59:[2,27],60:[2,27],61:[2,27],62:[2,27],63:[2,27],65:[2,27],66:[2,27],75:[1,69],76:[1,70],77:[1,71],78:[1,72],79:[1,73],80:[1,74],81:[1,75],82:[1,76],83:[1,77],84:[1,78],85:[1,79],86:[1,80],87:[1,81]},{5:[2,21],17:[2,21],21:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],27:[2,21],28:[2,21],31:[2,21],32:[2,21],34:[2,21],35:[2,21],38:[2,21],39:[2,21],43:[2,21],44:[2,21],49:[2,21],59:[2,21],60:[2,21],61:[2,21],62:[2,21],63:[2,21],65:[2,21],66:[2,21]},{49:[1,185]},{41:[2,101],48:[2,101]},{41:[2,33],48:[2,33]},{21:[2,13],23:[2,13],24:[2,13],25:[2,13]},{5:[2,25],17:[2,25],21:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],31:[2,25],32:[2,25],34:[2,25],35:[2,25],38:[2,25],39:[2,25],43:[2,25],44:[2,25],49:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],63:[2,25],65:[2,25],66:[2,25]},{5:[2,29],17:[2,29],21:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],27:[2,29],28:[2,29],31:[2,29],32:[2,29],34:[2,29],35:[2,29],38:[2,29],39:[2,29],43:[2,29],44:[2,29],49:[2,29],59:[2,29],60:[2,29],61:[2,29],62:[2,29],63:[2,29],65:[2,29],66:[2,29]}],
defaultActions: {4:[2,1],173:[2,18]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var ast = require("./ast");

    //helper function
    function print(_){
        //console.log(_);
    }
    function debug(_){
        console.log(_);
    }
    function pos($pos, yy){
        var _p = {};
        for(var i in $pos){
            if ($pos.hasOwnProperty(i)){
                _p[i] = $pos[i]
            }
        }
        _p.fileid = yy.fileid;//自定义的属性，这是文件名
        return _p;
    }


//console.log("start compile ...")

/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 */
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

    var r_macroSymbol = /[\w\d\-_\+\/\*%!@\$]/,
        r_ltrim = /^\s+/,
        r_rtrim = /\s+$/;

    function trim(str){
        return (str + "").replace(r_ltrim, "").replace(r_rtrim, "");
    }


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    print(yy_.yytext)
    this.begin("ST_CS_START");

break;
case 1:
    this.popState();
    this.begin("ST_IGNORE");
    return "T_DEBUGGER";

break;
case 2:
    this.popState();

break;
case 3:
    //都是注释
    this.popState();

break;
case 4:
    this.unput(yy_.yytext);
    this.popState();
    this.begin("ST_CS");

break;
case 5:
    this.popState();

break;
case 6:
    var index = yy_.yytext.indexOf(":");
    if (index >= 0){
        yy_.yytext = trim(yy_.yytext.substring(0, index));
    }
    if (yy_.yytext == "def" || yy_.yytext == "call"){
        this.begin("ST_CS_MACRO_SYMBOL");
    } else if (yy_.yytext == "/escape"){
        //非常怪，居然有两种写法
        return "T_END_ESCAPE";
    } else if (yy_.yytext == "include"){
        this.begin("ST_CS_INCLUDE");
        return;//include 只影响词法分析
    }

    return "T_" + yy_.yytext.toUpperCase();

break;
case 7:
    //jison不能很好第支持include，这需要修改它（使用一个修改过的jison)
    this.popState();
    yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length - 1);

    if (typeof this.include == "function") {
        this.include(yy_.yytext);
    }
    return "T_INCLUDE";

break;
case 8:
    yy_.yytext = trim(yy_.yytext);
    this.popState();
    return "T_MACRO_NAME"

break;
case 9:
    print(yy_.yytext);
    return "T_ELSE";

break;
case 10:
    return "T_END_IF";

break;
case 11:
    return "T_END_EACH";

break;
case 12:
    return "T_END_LOOP";

break;
case 13:
    return "T_END_ALT";

break;
case 14:
    return "T_END_WITH";

break;
case 15:
    return "T_END_MACRO_DEF"

break;
case 16:
    return "T_END_ESCAPE";

break;
case 17:
    //支持 string.length这样的function
    return "T_FUN_NAME";

break;
case 18:
    print(yy_.yytext);
    this.begin("ST_END_VARIABEL");
    return "T_VARIABLE";

break;
case 19:
    this.popState();
    if (yy_.yytext == "."){
        this.begin("ST_VARIABLE_PROP");
        print(yy_.yytext);
        return yy_.yytext;
    }
    this.unput(yy_.yytext);

break;
case 20:
    this.popState();//弹掉状态,表示处理完属性
    this.begin("ST_END_VARIABEL");//当前属性是新的variable
    return "T_VARIABLE"

break;
case 21:
    this.popState();//弹掉状态,表示处理完属性
    this.begin("ST_END_VARIABEL");//当前属性是新的variable
    return "PROP_NUMBER"

break;
case 22:
    //非label和数字就要返回到正常状态,并退回吃掉的字符
    this.popState();
    this.unput(yy_.yytext);

break;
case 23:
    return "NUMBER_HEX"

break;
case 24:
    print(yy_.yytext);
    return "NUMBER";

break;
case 25:
    var quote = yy_.yytext;
    yy_.yytext = "";//扔掉引号
    if (this.enableEscapedString){//原cs引擎不支持\\,\",\'，所以留个开关
        while(true){
            var ch = this._input[0];
            if (ch == "\\"){
                this.input();
                yy_.yytext = yy_.yytext.substring(0, yy_.yytext.length - 1);//跳过 "\\"，取后面的转义字符
                this.input();
            } else if (ch == quote){
                this.input();//字符串结束
                yy_.yytext = yy_.yytext.substring(0, yy_.yytext.length - 1);//吃进来的字符串要丢掉
                break;
            } else if (ch !== undefined) {
                this.input();
            } else {
                //到文件末尾，留给语法分析出错
                break;
            }
        }
    } else {
        while(true){
            var ch = this._input[0];
            /*
            if (ch == "\\"){
                this.showPosition();
                throw new Error("不支持转义字符");
            } else */if (ch == quote){
                this.input();//字符串结束
                yy_.yytext = yy_.yytext.substring(0, yy_.yytext.length - 1);//吃进来的字符串要丢掉
                break;
            } else if (ch !== undefined){
                this.input();//吃进更多的字符
            } else {
                break;
            }
        }
    }
    print(yy_.yytext);
    return "STRING";

break;
case 26:
    print(yy_.yytext);
    return "T_IS_EQUAL";

break;
case 27:
    print(yy_.yytext);
    return "T_IS_NOT_EQUAL";

break;
case 28:
    print(yy_.yytext);
    return "T_IS_GREATER_OR_EQUAL";

break;
case 29:
    print(yy_.yytext);
    return "T_IS_SMALLER_OR_EQUAL";

break;
case 30:
    print(yy_.yytext);
    return "T_BOOLEAN_OR"

break;
case 31:
    print(yy_.yytext);
    return "T_BOOLEAN_AND"

break;
case 32:
    print(yy_.yytext);
    if (yy_.yytext == ']'){
        this.begin("ST_END_BRACKET");
    }
    return yy_.yytext;

break;
case 33:
    //特殊处理 ".", number can property in hdf
    this.popState();
    print(yy_.yytext);
    if (yy_.yytext == "."){
        this.begin("ST_VARIABLE_PROP");
        return yy_.yytext;
    }
    this.unput(yy_.yytext);

break;
case 34:
    //ignore whitespace

break;
case 35:
    return "CONTENT";

break;
case 36:return "EOF";
break;
case 37:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(<\?cs)([ \t]|((\\r|\\n|\\r\\n)))?)/,/^(?:#debugger)/,/^(?:([^])*?\?>)/,/^(?:#(?!debugger\s*)([^])*?\?>)/,/^(?:[^#])/,/^(?:\s*(\?>)((\\r|\\n|\\r\\n))?)/,/^(?:((var|evar|lvar|set|name|include|if|elif|elseif|alt|each|loop|with|def|call|escape|\/escape))\s*:\s*)/,/^(?:(['"]).*\1)/,/^(?:([\w\d\-_\+\/\*%!@\$])+(?:\.([\w\d\-_\+\/\*%!@\$])+)*\s*(?=\())/,/^(?:else)/,/^(?:\/if)/,/^(?:\/each)/,/^(?:\/loop)/,/^(?:\/alt)/,/^(?:\/with)/,/^(?:\/def)/,/^(?:\/escape)/,/^(?:([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)(?:\.([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))+(?=\s*\())/,/^(?:([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))/,/^(?:([^]))/,/^(?:([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))/,/^(?:([0-9]+))/,/^(?:[^0-9a-zA-Z_\x7f-\xff])/,/^(?:(0x[0-9a-fA-F]+))/,/^(?:(([0-9]*\.[0-9]+)|([0-9]+\.[0-9]*))|([0-9]+))/,/^(?:\B['"])/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:([\#,.\[\]()+-/\*=%!<>?$]))/,/^(?:([^]))/,/^(?:([ \n\r\t]+))/,/^(?:(?!(<\?cs))([^])+?(?=(<\?cs)|$))/,/^(?:$)/,/^(?:.)/],
conditions: {"ST_CS_START":{"rules":[1,3,4],"inclusive":false},"ST_CS":{"rules":[5,6,9,10,11,12,13,14,15,16,17,18,23,24,25,26,27,28,29,30,31,32,34],"inclusive":false},"ST_END_BRACKET":{"rules":[33],"inclusive":false},"ST_END_VARIABEL":{"rules":[19],"inclusive":false},"ST_VARIABLE_PROP":{"rules":[20,21,22],"inclusive":false},"ST_CS_MACRO_SYMBOL":{"rules":[8],"inclusive":false},"ST_CS_INCLUDE":{"rules":[7],"inclusive":false},"ST_IGNORE":{"rules":[2],"inclusive":false},"INITIAL":{"rules":[0,35,36,37],"inclusive":true}}
};
//console.log("start lex parse ...")

/**
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 */;
return lexer;
})();
function Lexer(){}
Lexer.prototype = lexer;

function Parser () {
	this.yy = {};
	this.lexer = new Lexer();
}
Parser.prototype = parser;
var clearsilver = new Parser();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = clearsilver;//default parser instance
exports.Parser = Parser;//Parser construct function
exports.parse = function () {
    return clearsilver.parse.apply(clearsilver, arguments); 
};//simple interface for default parser
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
