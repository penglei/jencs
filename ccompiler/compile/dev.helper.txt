作用域：
每个变量用相同的算法生成c语言符号，如果该符号已经存在，直接使用，而不用再定义

如果出现分支，就需要在两个分支中都出现的hdf节点用c符号代替
如何进行符号合并回溯
body中处理完，查看符号
生成alternative
查看alternative scope中所有的符号

对于当前body scope 和 alternative scope 中的符号

如果两者中有相同的（如何对比符号，看它们引用的是不是同一个hdf节点，也就是symbol.name相同）

如何处理表达式生成的临时变量？
如果全部放在顶层，会使进入的整个栈变得特别大，占用过多的内存（但对cpu几乎没有影响）
唯一麻烦的是把所有变量放在一个scope下面使编译的符号管理变得符杂。

对于每个表达式，都进入一个stack，只把最终需要的那个值放在上层scope中，当然，表达式中间用的hdf节点还是要看上层scope中是否已经存在。
这里只对表达式中间的临时变量做处理。

对于已经在上层scope中存在的节点，不需要再在分支scope中新建符号


